describe("typeahead tests",function(){var a,b,c,d,e;beforeEach(module("ui.bootstrap.typeahead")),beforeEach(module("template/typeahead/typeahead-popup.html")),beforeEach(module("template/typeahead/typeahead-match.html")),beforeEach(module(function(a){a.directive("formatter",function(){return{require:"ngModel",link:function(a,b,c,d){d.$formatters.unshift(function(a){return"formatted"+a})}}})})),beforeEach(inject(function(f,h,i,j,k){a=f,a.source=["foo","bar","baz"],a.states=[{code:"AL",name:"Alaska"},{code:"CL",name:"California"}],b=h,c=i,d=j,e=function(b,c){var d=g(b);d.val(c),d.trigger(k.hasEvent("input")?"input":"change"),a.$digest()}}));var f=function(c){var d=b(angular.element(c))(a);return a.$digest(),d},g=function(a){return a.find("input")},h=function(a){return a.find("ul.dropdown-menu")},i=function(a){return h(a).find("li")},j=function(a,b){var c=g(a),d=$.Event("keydown");d.which=b,c.trigger(d)};beforeEach(function(){this.addMatchers({toBeClosed:function(){var a=h(this.actual);return this.message=function(){return'Expected "'+angular.mock.dump(a)+'" to be closed.'},0===a.length},toBeOpenWithActive:function(a,b){var c=h(this.actual),d=i(this.actual);return this.message=function(){return'Expected "'+this.actual+'" to be opened.'},1===c.length&&d.length===a&&$(d[b]).hasClass("active")}})}),afterEach(function(){h(c.find("body")).remove()}),describe("initial state and model changes",function(){it("should be closed by default",function(){var a=f('<div><input ng-model="result" typeahead="item for item in source"></div>');expect(a).toBeClosed()}),it('should correctly render initial state if the "as" keyword is used',function(){a.result=a.states[0];var b=f('<div><input ng-model="result" typeahead="state as state.name for state in states"></div>'),c=g(b);expect(c.val()).toEqual("Alaska")}),it("should default to bound model for initial rendering if there is not enough info to render label",function(){a.result=a.states[0].code;var b=f('<div><input ng-model="result" typeahead="state.code as state.name + state.code for state in states"></div>'),c=g(b);expect(c.val()).toEqual("AL")}),it("should not get open on model change",function(){var b=f('<div><input ng-model="result" typeahead="item for item in source"></div>');a.$apply(function(){a.result="foo"}),expect(b).toBeClosed()})}),describe("basic functionality",function(){it("should open and close typeahead based on matches",function(){var a=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue"></div>'),b=g(a),c=b.attr("aria-owns");expect(b.attr("aria-expanded")).toBe("false"),expect(b.attr("aria-activedescendant")).toBeUndefined(),e(a,"ba"),expect(a).toBeOpenWithActive(2,0),expect(h(a).attr("id")).toBe(c),expect(b.attr("aria-expanded")).toBe("true");var d=c+"-option-0";expect(b.attr("aria-activedescendant")).toBe(d),expect(h(a).find("li.active").attr("id")).toBe(d),e(a,""),expect(a).toBeClosed(),expect(b.attr("aria-expanded")).toBe("false"),expect(b.attr("aria-activedescendant")).toBeUndefined()}),it("should allow expressions over multiple lines",function(){var a=f('<div><input ng-model="result" typeahead="item for item in source \n| filter:$viewValue"></div>');e(a,"ba"),expect(a).toBeOpenWithActive(2,0),e(a,""),expect(a).toBeClosed()}),it("should not open typeahead if input value smaller than a defined threshold",function(){var a=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue" typeahead-min-length="2"></div>');e(a,"b"),expect(a).toBeClosed()}),it("should support custom model selecting function",function(){a.updaterFn=function(a){return"prefix"+a};var b=f('<div><input ng-model="result" typeahead="updaterFn(item) as item for item in source | filter:$viewValue"></div>');e(b,"f"),j(b,13),expect(a.result).toEqual("prefixfoo")}),it("should support custom label rendering function",function(){a.formatterFn=function(a){return"prefix"+a};var b=f('<div><input ng-model="result" typeahead="item as formatterFn(item) for item in source | filter:$viewValue"></div>');e(b,"fo");var c=i(b).find("a").html();expect(c).toEqual("prefix<strong>fo</strong>o")}),it("should by default bind view value to model even if not part of matches",function(){var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue"></div>');e(b,"not in matches"),expect(a.result).toEqual("not in matches")}),it("should support the editable property to limit model bindings to matches only",function(){var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></div>');e(b,"not in matches"),expect(a.result).toEqual(void 0)}),it("should set validation errors for non-editable inputs",function(){var b=f('<div><form name="form"><input name="input" ng-model="result" typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></form></div>');e(b,"not in matches"),expect(a.result).toEqual(void 0),expect(a.form.input.$error.editable).toBeTruthy(),e(b,"foo"),j(b,13),expect(a.result).toEqual("foo"),expect(a.form.input.$error.editable).toBeFalsy()}),it("should not set editable validation error for empty input",function(){var b=f('<div><form name="form"><input name="input" ng-model="result" typeahead="item for item in source | filter:$viewValue" typeahead-editable="false"></form></div>');e(b,"not in matches"),expect(a.result).toEqual(void 0),expect(a.form.input.$error.editable).toBeTruthy(),e(b,""),expect(a.result).toEqual(""),expect(a.form.input.$error.editable).toBeFalsy()}),it("should bind loading indicator expression",inject(function(b){a.isLoading=!1,a.loadMatches=function(){return b(function(){return[]},1e3)};var c=f('<div><input ng-model="result" typeahead="item for item in loadMatches()" typeahead-loading="isLoading"></div>');e(c,"foo"),expect(a.isLoading).toBeTruthy(),b.flush(),expect(a.isLoading).toBeFalsy()})),it("should support timeout before trying to match $viewValue",inject(function(a){var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue" typeahead-wait-ms="200"></div>');e(b,"foo"),expect(b).toBeClosed(),a.flush(),expect(b).toBeOpenWithActive(1,0)})),it("should cancel old timeouts when something is typed within waitTime",inject(function(b){var c=[];a.loadMatches=function(b){return c.push(b),a.source};var d=f('<div><input ng-model="result" typeahead="item for item in loadMatches($viewValue) | filter:$viewValue" typeahead-wait-ms="200"></div>');e(d,"first"),e(d,"second"),b.flush(),expect(c).not.toContain("first")})),it("should allow timeouts when something is typed after waitTime has passed",inject(function(b){var c=[];a.loadMatches=function(b){return c.push(b),a.source};var d=f('<div><input ng-model="result" typeahead="item for item in loadMatches($viewValue) | filter:$viewValue" typeahead-wait-ms="200"></div>');e(d,"first"),b.flush(),expect(c).toContain("first"),e(d,"second"),b.flush(),expect(c).toContain("second")})),it("should support custom templates for matched items",inject(function(a){a.put("custom.html","<p>{{ index }} {{ match.label }}</p>");var b=f('<div><input ng-model="result" typeahead-template-url="custom.html" typeahead="state as state.name for state in states | filter:$viewValue"></div>');e(b,"Al"),expect(i(b).eq(0).find("p").text()).toEqual("0 Alaska")})),it("should throw error on invalid expression",function(){var a=function(){f('<div><input ng-model="result" typeahead="an invalid expression"></div>')};expect(a).toThrow()})}),describe("selecting a match",function(){it("should select a match on enter",function(){var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue"></div>'),c=g(b);e(b,"b"),j(b,13),expect(a.result).toEqual("bar"),expect(c.val()).toEqual("bar"),expect(b).toBeClosed()}),it("should select a match on tab",function(){var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue"></div>'),c=g(b);e(b,"b"),j(b,9),expect(a.result).toEqual("bar"),expect(c.val()).toEqual("bar"),expect(b).toBeClosed()}),it("should select match on click",function(){var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue"></div>'),c=g(b);e(b,"b");var d=$(i(b)[1]).find("a")[0];$(d).click(),a.$digest(),expect(a.result).toEqual("baz"),expect(c.val()).toEqual("baz"),expect(b).toBeClosed()}),it("should invoke select callback on select",function(){a.onSelect=function(b,c,d){a.$item=b,a.$model=c,a.$label=d};var b=f('<div><input ng-model="result" typeahead-on-select="onSelect($item, $model, $label)" typeahead="state.code as state.name for state in states | filter:$viewValue"></div>');e(b,"Alas"),j(b,13),expect(a.result).toEqual("AL"),expect(a.$item).toEqual(a.states[0]),expect(a.$model).toEqual("AL"),expect(a.$label).toEqual("Alaska")}),it("should correctly update inputs value on mapping where label is not derived from the model",function(){var b=f('<div><input ng-model="result" typeahead="state.code as state.name for state in states | filter:$viewValue"></div>'),c=g(b);e(b,"Alas"),j(b,13),expect(a.result).toEqual("AL"),expect(c.val()).toEqual("AL")})}),describe("pop-up interaction",function(){var a;beforeEach(function(){a=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue"></div>')}),it("should activate prev/next matches on up/down keys",function(){e(a,"b"),expect(a).toBeOpenWithActive(2,0),j(a,40),expect(a).toBeOpenWithActive(2,1),j(a,40),expect(a).toBeOpenWithActive(2,0),j(a,38),expect(a).toBeOpenWithActive(2,1),j(a,38),expect(a).toBeOpenWithActive(2,0)}),it("should close popup on escape key",function(){e(a,"b"),expect(a).toBeOpenWithActive(2,0),j(a,27),expect(a).toBeClosed()}),it("should highlight match on mouseenter",function(){e(a,"b"),expect(a).toBeOpenWithActive(2,0),i(a).eq(1).trigger("mouseenter"),expect(a).toBeOpenWithActive(2,1)})}),describe("promises",function(){var b,c;beforeEach(inject(function(d){c=d.defer(),a.source=function(){return c.promise},b=f('<div><input ng-model="result" typeahead="item for item in source()"></div>')})),it("should display matches from promise",function(){e(b,"c"),expect(b).toBeClosed(),c.resolve(["good","stuff"]),a.$digest(),expect(b).toBeOpenWithActive(2,0)}),it("should not display anything when promise is rejected",function(){e(b,"c"),expect(b).toBeClosed(),c.reject("fail"),a.$digest(),expect(b).toBeClosed()})}),describe("non-regressions tests",function(){it("issue 231 - closes matches popup on click outside typeahead",function(){var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue"></div>');e(b,"b"),c.find("body").click(),a.$digest(),expect(b).toBeClosed()}),it("issue 591 - initial formatting for un-selected match and complex label expression",function(){var a=g(f('<div><input ng-model="result" typeahead="state as state.name + \' \' + state.code for state in states | filter:$viewValue"></div>'));expect(a.val()).toEqual("")}),it("issue 786 - name of internal model should not conflict with scope model name",function(){a.state=a.states[0];var b=f('<div><input ng-model="state" typeahead="state as state.name for state in states | filter:$viewValue"></div>'),c=g(b);expect(c.val()).toEqual("Alaska")}),it('issue 863 - it should work correctly with input type="email"',function(){a.emails=["foo@host.com","bar@host.com"];var b=f('<div><input type="email" ng-model="email" typeahead="email for email in emails | filter:$viewValue"></div>'),c=g(b);e(b,"bar"),expect(b).toBeOpenWithActive(1,0),j(b,13),expect(a.email).toEqual("bar@host.com"),expect(c.val()).toEqual("bar@host.com")}),it("issue 964 - should not show popup with matches if an element is not focused",function(){a.items=function(a){return d(function(){return[a]})};var b=f('<div><input ng-model="result" typeahead="item for item in items($viewValue)"></div>'),c=g(b);e(b,"match"),a.$digest(),c.blur(),d.flush(),expect(b).toBeClosed()}),it("should properly update loading callback if an element is not focused",function(){a.items=function(a){return d(function(){return[a]})};var b=f('<div><input ng-model="result" typeahead-loading="isLoading" typeahead="item for item in items($viewValue)"></div>'),c=g(b);e(b,"match"),a.$digest(),c.blur(),d.flush(),expect(a.isLoading).toBeFalsy()}),it("issue 1140 - should properly update loading callback when deleting characters",function(){a.items=function(a){return d(function(){return[a]})};var b=f('<div><input ng-model="result" typeahead-min-length="2" typeahead-loading="isLoading" typeahead="item for item in items($viewValue)"></div>');e(b,"match"),a.$digest(),expect(a.isLoading).toBeTruthy(),e(b,"m"),d.flush(),a.$digest(),expect(a.isLoading).toBeFalsy()}),it("should cancel old timeout when deleting characters",inject(function(b){var c=[];a.loadMatches=function(b){return c.push(b),a.source};var d=f('<div><input ng-model="result" typeahead="item for item in loadMatches($viewValue) | filter:$viewValue" typeahead-min-length="2" typeahead-wait-ms="200"></div>');e(d,"match"),e(d,"m"),b.flush(),expect(c).not.toContain("match")})),it("does not close matches popup on click in input",function(){var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue"></div>'),d=g(b);c.find("body").append(b),this.after(function(){b.remove()}),e(b,"b"),d.click(),a.$digest(),expect(b).toBeOpenWithActive(2,0)}),it('issue #1238 - allow names like "query" to be used inside "in" expressions ',function(){a.query=function(){return["foo","bar"]};var b=f('<div><input ng-model="result" typeahead="item for item in query($viewValue)"></div>');e(b,"bar"),expect(b).toBeOpenWithActive(2,0)}),it("issue #1773 - should not trigger an error when used with ng-focus",function(){{var b=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue" ng-focus="foo()"></div>');g(b)}c.find("body").append(b),this.after(function(){b.remove()}),e(b,"b");var d=$(i(b)[1]).find("a")[0];$(d).click(),a.$digest()})}),describe("input formatting",function(){it("should co-operate with existing formatters",function(){a.result=a.states[0];var b=f('<div><input ng-model="result.name" formatter typeahead="state.name for state in states | filter:$viewValue"></div>'),c=g(b);expect(c.val()).toEqual("formatted"+a.result.name)}),it("should support a custom input formatting function",function(){a.result=a.states[0],a.formatInput=function(a){return a.code};var b=f('<div><input ng-model="result" typeahead-input-formatter="formatInput($model)" typeahead="state as state.name for state in states | filter:$viewValue"></div>'),c=g(b);expect(c.val()).toEqual("AL"),expect(a.result).toEqual(a.states[0])})}),describe("append to body",function(){it("append typeahead results to body",function(){var a=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue" typeahead-append-to-body="true"></div>');e(a,"ba"),expect(c.find("body")).toBeOpenWithActive(2,0)}),it("should not append to body when value of the attribute is false",function(){var a=f('<div><input ng-model="result" typeahead="item for item in source | filter:$viewValue" typeahead-append-to-body="false"></div>');e(a,"ba"),expect(h(c.find("body")).length).toEqual(0)})})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\typeahead\test\typeahead.spec.min.map