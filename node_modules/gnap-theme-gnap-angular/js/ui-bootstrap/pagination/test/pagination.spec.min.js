describe("pagination directive",function(){function a(){return g.find("li").length}function b(a){return g.find("li").eq(a)}function c(a){b(a).find("a").click()}function d(a){f.currentPage=a,f.$digest()}var e,f,g;beforeEach(module("ui.bootstrap.pagination")),beforeEach(module("template/pagination/pagination.html")),beforeEach(inject(function(a,b){e=a,f=b,f.total=47,f.currentPage=3,g=e('<pagination total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest()})),it('has a "pagination" css class',function(){expect(g.hasClass("pagination")).toBe(!0)}),it("contains num-pages + 2 li elements",function(){expect(a()).toBe(7),expect(b(0).text()).toBe("Previous"),expect(b(-1).text()).toBe("Next")}),it("has the number of the page as text in each page item",function(){for(var a=1;5>=a;a++)expect(b(a).text()).toEqual(""+a)}),it("sets the current page to be active",function(){expect(b(f.currentPage).hasClass("active")).toBe(!0)}),it('disables the "previous" link if current page is 1',function(){d(1),expect(b(0).hasClass("disabled")).toBe(!0)}),it('disables the "next" link if current page is last',function(){d(5),expect(b(-1).hasClass("disabled")).toBe(!0)}),it("changes currentPage if a page link is clicked",function(){c(2),expect(f.currentPage).toBe(2)}),it('changes currentPage if the "previous" link is clicked',function(){c(0),expect(f.currentPage).toBe(2)}),it('changes currentPage if the "next" link is clicked',function(){c(-1),expect(f.currentPage).toBe(4)}),it('does not change the current page on "previous" click if already at first page',function(){d(1),c(0),expect(f.currentPage).toBe(1)}),it('does not change the current page on "next" click if already at last page',function(){d(5),c(-1),expect(f.currentPage).toBe(5)}),it("changes the number of pages when `total-items` changes",function(){f.total=78,f.$digest(),expect(a()).toBe(10),expect(b(0).text()).toBe("Previous"),expect(b(-1).text()).toBe("Next")}),it('does not "break" when `total-items` is undefined',function(){f.total=void 0,f.$digest(),expect(a()).toBe(3),expect(b(0)).toHaveClass("disabled"),expect(b(1)).toHaveClass("active"),expect(b(2)).toHaveClass("disabled")}),it('does not "break" when `total-items` is negative',function(){f.total=-1,f.$digest(),expect(a()).toBe(3),expect(b(0)).toHaveClass("disabled"),expect(b(1)).toHaveClass("active"),expect(b(2)).toHaveClass("disabled")}),it("does not change the current page when `total-items` changes but is valid",function(){f.currentPage=1,f.total=18,f.$digest(),expect(f.currentPage).toBe(1)}),describe("`items-per-page`",function(){beforeEach(function(){f.perpage=5,g=e('<pagination total-items="total" items-per-page="perpage" ng-model="currentPage"></pagination>')(f),f.$digest()}),it("changes the number of pages",function(){expect(a()).toBe(12),expect(b(0).text()).toBe("Previous"),expect(b(-1).text()).toBe("Next")}),it("changes the number of pages when changes",function(){f.perpage=20,f.$digest(),expect(a()).toBe(5),expect(b(0).text()).toBe("Previous"),expect(b(-1).text()).toBe("Next")}),it("selects the last page when current page is too big",function(){f.perpage=30,f.$digest(),expect(f.currentPage).toBe(2),expect(a()).toBe(4),expect(b(0).text()).toBe("Previous"),expect(b(-1).text()).toBe("Next")}),it("displays a single page when it is negative",function(){f.perpage=-1,f.$digest(),expect(a()).toBe(3),expect(b(0).text()).toBe("Previous"),expect(b(1).text()).toBe("1"),expect(b(-1).text()).toBe("Next")})}),describe("executes  `ng-change` expression",function(){beforeEach(function(){f.selectPageHandler=jasmine.createSpy("selectPageHandler"),g=e('<pagination total-items="total" ng-model="currentPage" ng-change="selectPageHandler()"></pagination>')(f),f.$digest()}),it("when an element is clicked",function(){c(2),expect(f.selectPageHandler).toHaveBeenCalled()})}),describe("when `page` is not a number",function(){it("handles numerical string",function(){d("2"),expect(b(2)).toHaveClass("active"),d("04"),expect(b(4)).toHaveClass("active")}),it("defaults to 1 if non-numeric",function(){d("pizza"),expect(b(1)).toHaveClass("active")})}),describe("with `max-size` option",function(){beforeEach(function(){f.total=98,f.currentPage=3,f.maxSize=5,g=e('<pagination total-items="total" ng-model="currentPage" max-size="maxSize"></pagination>')(f),f.$digest()}),it("contains maxsize + 2 li elements",function(){expect(a()).toBe(f.maxSize+2),expect(b(0).text()).toBe("Previous"),expect(b(-1).text()).toBe("Next")}),it("shows the page number even if it can't be shown in the middle",function(){d(1),expect(b(1)).toHaveClass("active"),d(10),expect(b(-2)).toHaveClass("active")}),it("shows the page number in middle after the next link is clicked",function(){d(6),c(-1),expect(f.currentPage).toBe(7),expect(b(3)).toHaveClass("active"),expect(b(3).text()).toBe(""+f.currentPage)}),it("shows the page number in middle after the prev link is clicked",function(){d(7),c(0),expect(f.currentPage).toBe(6),expect(b(3)).toHaveClass("active"),expect(b(3).text()).toBe(""+f.currentPage)}),it("changes pagination bar size when max-size value changed",function(){f.maxSize=7,f.$digest(),expect(a()).toBe(9)}),it("sets the pagination bar size to num-pages, if max-size is greater than num-pages ",function(){f.maxSize=15,f.$digest(),expect(a()).toBe(12)}),it("should not change value of max-size expression, if max-size is greater than num-pages ",function(){f.maxSize=15,f.$digest(),expect(f.maxSize).toBe(15)}),it("should not display page numbers, if max-size is zero",function(){f.maxSize=0,f.$digest(),expect(a()).toBe(2),expect(b(0).text()).toBe("Previous"),expect(b(-1).text()).toBe("Next")})}),describe("with `max-size` option & no `rotate`",function(){beforeEach(function(){f.total=115,f.currentPage=7,f.maxSize=5,f.rotate=!1,g=e('<pagination total-items="total" ng-model="currentPage" max-size="maxSize" rotate="rotate"></pagination>')(f),f.$digest()}),it("contains maxsize + 4 elements",function(){expect(a()).toBe(f.maxSize+4),expect(b(0).text()).toBe("Previous"),expect(b(1).text()).toBe("..."),expect(b(2).text()).toBe("6"),expect(b(-3).text()).toBe("10"),expect(b(-2).text()).toBe("..."),expect(b(-1).text()).toBe("Next")}),it("shows only the next ellipsis element on first page set",function(){d(3),expect(b(1).text()).toBe("1"),expect(b(-3).text()).toBe("5"),expect(b(-2).text()).toBe("...")}),it("shows only the previous ellipsis element on last page set",function(){d(12),expect(a()).toBe(5),expect(b(1).text()).toBe("..."),expect(b(2).text()).toBe("11"),expect(b(-2).text()).toBe("12")}),it("moves to the previous set when first ellipsis is clicked",function(){expect(b(1).text()).toBe("..."),c(1),expect(f.currentPage).toBe(5),expect(b(-3)).toHaveClass("active")}),it("moves to the next set when last ellipsis is clicked",function(){expect(b(-2).text()).toBe("..."),c(-2),expect(f.currentPage).toBe(11),expect(b(2)).toHaveClass("active")}),it("should not display page numbers, if max-size is zero",function(){f.maxSize=0,f.$digest(),expect(a()).toBe(2),expect(b(0).text()).toBe("Previous"),expect(b(1).text()).toBe("Next")})}),describe("pagination directive with `boundary-links`",function(){beforeEach(function(){g=e('<pagination boundary-links="true" total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest()}),it("contains num-pages + 4 li elements",function(){expect(a()).toBe(9),expect(b(0).text()).toBe("First"),expect(b(1).text()).toBe("Previous"),expect(b(-2).text()).toBe("Next"),expect(b(-1).text()).toBe("Last")}),it("has first and last li elements visible",function(){expect(b(0).css("display")).not.toBe("none"),expect(b(-1).css("display")).not.toBe("none")}),it('disables the "first" & "previous" link if current page is 1',function(){d(1),expect(b(0)).toHaveClass("disabled"),expect(b(1)).toHaveClass("disabled")}),it('disables the "last" & "next" link if current page is num-pages',function(){d(5),expect(b(-2)).toHaveClass("disabled"),expect(b(-1)).toHaveClass("disabled")}),it('changes currentPage if the "first" link is clicked',function(){c(0),expect(f.currentPage).toBe(1)}),it('changes currentPage if the "last" link is clicked',function(){c(-1),expect(f.currentPage).toBe(5)}),it('does not change the current page on "first" click if already at first page',function(){d(1),c(0),expect(f.currentPage).toBe(1)}),it('does not change the current page on "last" click if already at last page',function(){d(5),c(-1),expect(f.currentPage).toBe(5)}),it('changes "first" & "last" text from attributes',function(){g=e('<pagination boundary-links="true" first-text="<<<" last-text=">>>" total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest(),expect(b(0).text()).toBe("<<<"),expect(b(-1).text()).toBe(">>>")}),it('changes "previous" & "next" text from attributes',function(){g=e('<pagination boundary-links="true" previous-text="<<" next-text=">>" total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest(),expect(b(1).text()).toBe("<<"),expect(b(-2).text()).toBe(">>")}),it('changes "first" & "last" text from interpolated attributes',function(){f.myfirstText="<<<",f.mylastText=">>>",g=e('<pagination boundary-links="true" first-text="{{myfirstText}}" last-text="{{mylastText}}" total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest(),expect(b(0).text()).toBe("<<<"),expect(b(-1).text()).toBe(">>>")}),it('changes "previous" & "next" text from interpolated attributes',function(){f.previousText="<<",f.nextText=">>",g=e('<pagination boundary-links="true" previous-text="{{previousText}}" next-text="{{nextText}}" total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest(),expect(b(1).text()).toBe("<<"),expect(b(-2).text()).toBe(">>")})}),describe("pagination directive with just number links",function(){beforeEach(function(){g=e('<pagination direction-links="false" total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest()}),it("contains num-pages li elements",function(){expect(a()).toBe(5),expect(b(0).text()).toBe("1"),expect(b(-1).text()).toBe("5")}),it("has the number of the page as text in each page item",function(){for(var a=0;5>a;a++)expect(b(a).text()).toEqual(""+(a+1))}),it("sets the current page to be active",function(){expect(b(2)).toHaveClass("active")}),it('does not disable the "1" link if current page is 1',function(){d(1),expect(b(0)).not.toHaveClass("disabled"),expect(b(0)).toHaveClass("active")}),it('does not disable the "last" link if current page is last page',function(){d(5),expect(b(-1)).not.toHaveClass("disabled"),expect(b(-1)).toHaveClass("active")}),it("changes currentPage if a page link is clicked",function(){c(1),expect(f.currentPage).toBe(2)}),it("changes the number of items when total items changes",function(){f.total=73,f.$digest(),expect(a()).toBe(8),expect(b(0).text()).toBe("1"),expect(b(-1).text()).toBe("8")})}),describe("with just boundary & number links",function(){beforeEach(function(){f.directions=!1,g=e('<pagination boundary-links="true" direction-links="directions" total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest()}),it("contains number of pages + 2 li elements",function(){expect(a()).toBe(7),expect(b(0).text()).toBe("First"),expect(b(1).text()).toBe("1"),expect(b(-2).text()).toBe("5"),expect(b(-1).text()).toBe("Last")}),it('disables the "first" & activates "1" link if current page is 1',function(){d(1),expect(b(0)).toHaveClass("disabled"),expect(b(1)).not.toHaveClass("disabled"),expect(b(1)).toHaveClass("active")}),it('disables the "last" & "next" link if current page is num-pages',function(){d(5),expect(b(-2)).toHaveClass("active"),expect(b(-2)).not.toHaveClass("disabled"),expect(b(-1)).toHaveClass("disabled")})}),describe("`num-pages`",function(){beforeEach(function(){f.numpg=null,g=e('<pagination total-items="total" ng-model="currentPage" num-pages="numpg"></pagination>')(f),f.$digest()}),it("equals to total number of pages",function(){expect(f.numpg).toBe(5)}),it("changes when total number of pages change",function(){f.total=73,f.$digest(),expect(f.numpg).toBe(8)}),it("shows minimun one page if total items are not defined and does not break binding",function(){f.total=void 0,f.$digest(),expect(f.numpg).toBe(1),f.total=73,f.$digest(),expect(f.numpg).toBe(8)})}),describe("setting `paginationConfig`",function(){var c,d;beforeEach(inject(function(a){c=angular.copy(a),d=a})),afterEach(inject(function(a){angular.copy(c,a)})),it("should change paging text",function(){d.boundaryLinks=!0,d.directionLinks=!0,d.firstText="FI",d.previousText="PR",d.nextText="NE",d.lastText="LA",g=e('<pagination total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest(),expect(b(0).text()).toBe("FI"),expect(b(1).text()).toBe("PR"),expect(b(-2).text()).toBe("NE"),expect(b(-1).text()).toBe("LA")}),it("contains number of pages + 2 li elements",function(){d.itemsPerPage=5,g=e('<pagination total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest(),expect(a()).toBe(12)}),it("should take maxSize defaults into account",function(){d.maxSize=2,g=e('<pagination total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest(),expect(a()).toBe(4)})}),describe("override configuration from attributes",function(){beforeEach(function(){g=e('<pagination boundary-links="true" first-text="<<" previous-text="<" next-text=">" last-text=">>" total-items="total" ng-model="currentPage"></pagination>')(f),f.$digest()}),it("contains number of pages + 4 li elements",function(){expect(a()).toBe(9)}),it("should change paging text from attribute",function(){expect(b(0).text()).toBe("<<"),expect(b(1).text()).toBe("<"),expect(b(-2).text()).toBe(">"),expect(b(-1).text()).toBe(">>")})})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\pagination\test\pagination.spec.min.map