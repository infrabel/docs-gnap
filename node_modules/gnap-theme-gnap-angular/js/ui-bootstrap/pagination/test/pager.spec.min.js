describe("pager directive",function(){function a(){return g.find("li").length}function b(a){return g.find("li").eq(a)}function c(a){b(a).find("a").click()}function d(a){f.currentPage=a,f.$digest()}var e,f,g;beforeEach(module("ui.bootstrap.pagination")),beforeEach(module("template/pagination/pager.html")),beforeEach(inject(function(a,b){e=a,f=b,f.total=47,f.currentPage=3,g=e('<pager total-items="total" ng-model="currentPage"></pager>')(f),f.$digest()})),it('has a "pager" css class',function(){expect(g.hasClass("pager")).toBe(!0)}),it("contains 2 li elements",function(){expect(a()).toBe(2),expect(b(0).text()).toBe("« Previous"),expect(b(-1).text()).toBe("Next »")}),it("aligns previous & next page",function(){expect(b(0)).toHaveClass("previous"),expect(b(0)).not.toHaveClass("next"),expect(b(-1)).not.toHaveClass("previous"),expect(b(-1)).toHaveClass("next")}),it('disables the "previous" link if current page is 1',function(){d(1),expect(b(0)).toHaveClass("disabled")}),it('disables the "next" link if current page is num-pages',function(){d(5),expect(b(-1)).toHaveClass("disabled")}),it('changes currentPage if the "previous" link is clicked',function(){c(0),expect(f.currentPage).toBe(2)}),it('changes currentPage if the "next" link is clicked',function(){c(-1),expect(f.currentPage).toBe(4)}),it('does not change the current page on "previous" click if already at first page',function(){d(1),c(0),expect(f.currentPage).toBe(1)}),it('does not change the current page on "next" click if already at last page',function(){d(5),c(-1),expect(f.currentPage).toBe(5)}),it("executes the `ng-change` expression when an element is clicked",function(){f.selectPageHandler=jasmine.createSpy("selectPageHandler"),g=e('<pager total-items="total" ng-model="currentPage" ng-change="selectPageHandler()"></pager>')(f),f.$digest(),c(-1),expect(f.selectPageHandler).toHaveBeenCalled()}),it("does not changes the number of pages when `total-items` changes",function(){f.total=73,f.$digest(),expect(a()).toBe(2),expect(b(0).text()).toBe("« Previous"),expect(b(-1).text()).toBe("Next »")}),describe("`items-per-page`",function(){beforeEach(function(){f.perpage=5,g=e('<pager total-items="total" items-per-page="perpage" ng-model="currentPage"></pager>')(f),f.$digest()}),it("does not change the number of pages",function(){expect(a()).toBe(2),expect(b(0).text()).toBe("« Previous"),expect(b(-1).text()).toBe("Next »")}),it("selects the last page when it is too big",function(){f.perpage=30,f.$digest(),expect(f.currentPage).toBe(2),expect(a()).toBe(2),expect(b(0)).not.toHaveClass("disabled"),expect(b(-1)).toHaveClass("disabled")})}),describe("when `page` is not a number",function(){it("handles string",function(){d("1"),expect(b(0)).toHaveClass("disabled"),d("05"),expect(b(-1)).toHaveClass("disabled")})}),describe("`num-pages`",function(){beforeEach(function(){f.numpg=null,g=e('<pager total-items="total" ng-model="currentPage" num-pages="numpg"></pager>')(f),f.$digest()}),it("equals to total number of pages",function(){expect(f.numpg).toBe(5)})}),describe("setting `pagerConfig`",function(){var a={};beforeEach(inject(function(b){angular.extend(a,b),b.previousText="PR",b.nextText="NE",b.align=!1,g=e('<pager total-items="total" ng-model="currentPage"></pager>')(f),f.$digest()})),afterEach(inject(function(b){angular.extend(b,a)})),it("should change paging text",function(){expect(b(0).text()).toBe("PR"),expect(b(-1).text()).toBe("NE")}),it("should not align previous & next page link",function(){expect(b(0)).not.toHaveClass("previous"),expect(b(-1)).not.toHaveClass("next")})}),describe("override configuration from attributes",function(){beforeEach(function(){g=e('<pager align="false" previous-text="<" next-text=">" total-items="total" ng-model="currentPage"></pager>')(f),f.$digest()}),it("contains 2 li elements",function(){expect(a()).toBe(2)}),it("should change paging text from attributes",function(){expect(b(0).text()).toBe("<"),expect(b(-1).text()).toBe(">")}),it("should not align previous & next page link",function(){expect(b(0)).not.toHaveClass("previous"),expect(b(-1)).not.toHaveClass("next")}),it('changes "previous" & "next" text from interpolated attributes',function(){f.previousText="<<",f.nextText=">>",g=e('<pager align="false" previous-text="{{previousText}}" next-text="{{nextText}}" total-items="total" ng-model="currentPage"></pager>')(f),f.$digest(),expect(b(0).text()).toBe("<<"),expect(b(-1).text()).toBe(">>")})})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\pagination\test\pager.spec.min.map