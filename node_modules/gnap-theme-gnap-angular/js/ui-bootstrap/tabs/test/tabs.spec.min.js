describe("tabs",function(){function a(){return e.find("ul.nav-tabs li")}function b(){return e.find("div.tab-content div.tab-pane")}function c(b){var c=a();expect(c.length).toEqual(b.length);for(var d=0;d<c.length;d++)expect(c.eq(d).text().trim()).toEqual(b[d])}function d(a){var c=b();expect(c.length).toEqual(a.length);for(var d=0;d<c.length;d++)expect(c.eq(d).text().trim()).toEqual(a[d])}beforeEach(module("ui.bootstrap.tabs","template/tabs/tabset.html","template/tabs/tab.html"));var e,f;describe("basics",function(){beforeEach(inject(function(a,b){return f=b.$new(),f.first="1",f.second="2",f.actives={},f.selectFirst=jasmine.createSpy(),f.selectSecond=jasmine.createSpy(),f.deselectFirst=jasmine.createSpy(),f.deselectSecond=jasmine.createSpy(),e=a(['<tabset class="hello" data-pizza="pepperoni">','  <tab heading="First Tab {{first}}" active="actives.one" select="selectFirst()" deselect="deselectFirst()">',"    first content is {{first}}","  </tab>",'  <tab active="actives.two" select="selectSecond()" deselect="deselectSecond()">',"    <tab-heading><b>Second</b> Tab {{second}}</tab-heading>","    second content is {{second}}","  </tab>","</tabset>"].join("\n"))(f),f.$apply(),e})),it("should pass class and other attributes on to tab template",function(){expect(e).toHaveClass("hello"),expect(e.attr("data-pizza")).toBe("pepperoni")}),it("should create clickable titles",function(){var b=a();expect(b.length).toBe(2),expect(b.find("a").eq(0).text()).toBe("First Tab 1"),expect(b.find("a").eq(1).children().is("tab-heading")).toBe(!0),expect(b.find("a").eq(1).children().html()).toBe("<b>Second</b> Tab 2")}),it("should bind tabs content and set first tab active",function(){d(["first content is 1","second content is 2"]),expect(a().eq(0)).toHaveClass("active"),expect(a().eq(1)).not.toHaveClass("active"),expect(f.actives.one).toBe(!0),expect(f.actives.two).toBeFalsy()}),it("should change active on click",function(){a().eq(1).find("a").click(),expect(b().eq(1)).toHaveClass("active"),expect(a().eq(0)).not.toHaveClass("active"),expect(a().eq(1)).toHaveClass("active"),expect(f.actives.one).toBe(!1),expect(f.actives.two).toBe(!0)}),it("should call select callback on select",function(){a().eq(1).find("a").click(),expect(f.selectSecond).toHaveBeenCalled(),a().eq(0).find("a").click(),expect(f.selectFirst).toHaveBeenCalled()}),it("should call deselect callback on deselect",function(){a().eq(1).find("a").click(),a().eq(0).find("a").click(),expect(f.deselectSecond).toHaveBeenCalled(),a().eq(1).find("a").click(),expect(f.deselectFirst).toHaveBeenCalled()})}),describe("basics with initial active tab",function(){function c(c){var d=a();angular.forEach(f.tabs,function(a,e){c===a?(expect(a.active).toBe(!0),expect(a.select).toHaveBeenCalled(),expect(d.eq(e)).toHaveClass("active"),expect(b().eq(e)).toHaveClass("active")):(expect(a.active).toBe(!1),expect(d.eq(e)).not.toHaveClass("active"))})}beforeEach(inject(function(a,b){function c(a){return{active:!!a,select:jasmine.createSpy()}}f=b.$new(),f.tabs=[c(),c(),c(!0),c()],e=a(["<tabset>",'  <tab active="tabs[0].active" select="tabs[0].select()">',"  </tab>",'  <tab active="tabs[1].active" select="tabs[1].select()">',"  </tab>",'  <tab active="tabs[2].active" select="tabs[2].select()">',"  </tab>",'  <tab active="tabs[3].active" select="tabs[3].select()">',"  </tab>","</tabset>"].join("\n"))(f),f.$apply()})),it("should make tab titles and set active tab active",function(){expect(a().length).toBe(f.tabs.length),c(f.tabs[2])})}),describe("tab callback order",function(){var b;beforeEach(inject(function(a,c){return f=c.$new(),b=[],f.actives={},f.execute=function(a){b.push(a)},e=a(["<div>",'  <tabset class="hello" data-pizza="pepperoni">','    <tab heading="First Tab" active="actives.one" select="execute(\'select1\')" deselect="execute(\'deselect1\')"></tab>',"    <tab select=\"execute('select2')\" deselect=\"execute('deselect2')\"></tab>","  </tabset>","</div>"].join("\n"))(f),f.$apply(),e})),it("should call select  for the first tab",function(){expect(b).toEqual(["select1"])}),it("should call deselect, then select",function(){b=[],a().eq(1).find("a").click(),expect(b).toEqual(["deselect1","select2"]),b=[],a().eq(0).find("a").click(),expect(b).toEqual(["deselect2","select1"])})}),describe("ng-repeat",function(){function a(){return e.find("ul.nav-tabs li")}function b(){return e.find("div.tab-content div.tab-pane")}function c(c){var d=a();angular.forEach(f.tabs,function(a,e){c===a?(expect(a.active).toBe(!0),expect(a.select).toHaveBeenCalled(),expect(d.eq(e)).toHaveClass("active"),expect(b().eq(e).text().trim()).toBe("content "+e),expect(b().eq(e)).toHaveClass("active")):(expect(a.active).toBe(!1),expect(d.eq(e)).not.toHaveClass("active"))})}beforeEach(inject(function(a,b){function c(a){return{active:!!a,select:jasmine.createSpy()}}f=b.$new(),f.tabs=[c(),c(),c(!0),c()],e=a(["<tabset>",'  <tab ng-repeat="t in tabs" active="t.active" select="t.select()">',"    <tab-heading><b>heading</b> {{index}}</tab-heading>","    content {{$index}}","  </tab>","</tabset>"].join("\n"))(f),f.$apply()})),it("should make tab titles and set active tab active",function(){expect(a().length).toBe(f.tabs.length),c(f.tabs[2])}),it("should switch active when clicking",function(){a().eq(3).find("a").click(),c(f.tabs[3])}),it("should switch active when setting active=true",function(){f.$apply("tabs[2].active = true"),c(f.tabs[2])}),it("should deselect all when no tabs are active",function(){angular.forEach(f.tabs,function(a){a.active=!1}),f.$apply(),c(null),expect(b().filter(".active").length).toBe(0),f.tabs[2].active=!0,f.$apply(),c(f.tabs[2])})}),describe("advanced tab-heading element",function(){function a(){return e.find("ul li a").children()}beforeEach(inject(function(a,b,c){f=b.$new(),f.myHtml=c.trustAsHtml("<b>hello</b>, there!"),f.value=!0,e=a(["<tabset>","  <tab>",'    <tab-heading ng-bind-html="myHtml" ng-show="value">',"    </tab-heading>","  </tab>","  <tab><data-tab-heading>1</data-tab-heading></tab>","  <tab><div data-tab-heading>2</div></tab>","  <tab><div tab-heading>3</div></tab>","</tabset>"].join("\n"))(f),f.$apply()})),it("should create a heading bound to myHtml",function(){expect(a().eq(0).html()).toBe("<b>hello</b>, there!")}),it("should hide and show the heading depending on value",function(){expect(a().eq(0)).not.toBeHidden(),f.$apply("value = false"),expect(a().eq(0)).toBeHidden(),f.$apply("value = true"),expect(a().eq(0)).not.toBeHidden()}),it("should have a tab-heading no matter what syntax was used",function(){expect(a().eq(1).text()).toBe("1"),expect(a().eq(2).text()).toBe("2"),expect(a().eq(3).text()).toBe("3")})}),describe("tab ordering",function(){beforeEach(inject(function(a,b){f=b.$new(),f.tabs=[{title:"Title 1",available:!0},{title:"Title 2",available:!0},{title:"Title 3",available:!0}],e=a(["<tabset>","  <!-- a comment -->","  <div>div that makes troubles</div>",'  <tab heading="first">First Static</tab>',"  <div>another div that may do evil</div>",'  <tab ng-repeat="tab in tabs | filter:tabIsAvailable" active="tab.active" heading="{{tab.title}}">some content</tab>',"  <!-- another comment -->",'  <tab heading="mid">Mid Static</tab>',"  a text node","  <!-- another comment -->","  <span>yet another span that may do evil</span>",'  <tab ng-repeat="tab in tabs | filter:tabIsAvailable" active="tab.active" heading="Second {{tab.title}}">some content</tab>',"  a text node","  <span>yet another span that may do evil</span>","  <!-- another comment -->",'  <tab heading="last">Last Static</tab>',"  a text node","  <span>yet another span that may do evil</span>","  <!-- another comment -->","</tabset>"].join("\n"))(f),f.tabIsAvailable=function(a){return a.available}})),it("should preserve correct ordering",function(){function a(){return e.find("ul.nav-tabs li a")}f.$apply(),expect(a().length).toBe(9),f.$apply("tabs[1].available=false"),f.$digest(),expect(a().length).toBe(7),f.$apply("tabs[0].available=false"),f.$digest(),expect(a().length).toBe(5),f.$apply("tabs[2].available=false"),f.$digest(),expect(a().length).toBe(3),f.$apply("tabs[0].available=true"),f.$digest(),expect(a().length).toBe(5),f.$apply("tabs[1].available=true"),f.$apply("tabs[2].available=true"),f.$digest(),expect(a().length).toBe(9),expect(a().eq(0).text().trim()).toBe("first"),expect(a().eq(1).text().trim()).toBe("Title 1"),expect(a().eq(2).text().trim()).toBe("Title 2"),expect(a().eq(3).text().trim()).toBe("Title 3"),expect(a().eq(4).text().trim()).toBe("mid"),expect(a().eq(5).text().trim()).toBe("Second Title 1"),expect(a().eq(6).text().trim()).toBe("Second Title 2"),expect(a().eq(7).text().trim()).toBe("Second Title 3"),expect(a().eq(8).text().trim()).toBe("last")})}),describe("tabset controller",function(){function a(a){return{active:!!a,onSelect:angular.noop,onDeselect:angular.noop}}var b;beforeEach(inject(function(a,c){f=c,b=a("TabsetController",{$scope:f})})),describe("select",function(){it("should mark given tab selected",function(){var c=a();b.select(c),expect(c.active).toBe(!0)}),it("should deselect other tabs",function(){var c=a(),d=a(),e=a();b.addTab(c),b.addTab(d),b.addTab(e),b.select(c),expect(c.active).toBe(!0),expect(d.active).toBe(!1),expect(e.active).toBe(!1),b.select(d),expect(c.active).toBe(!1),expect(d.active).toBe(!0),expect(e.active).toBe(!1),b.select(e),expect(c.active).toBe(!1),expect(d.active).toBe(!1),expect(e.active).toBe(!0)})}),describe("addTab",function(){it("should append tab",function(){var c=a(),d=a();expect(b.tabs).toEqual([]),b.addTab(c),expect(b.tabs).toEqual([c]),b.addTab(d),expect(b.tabs).toEqual([c,d])}),it("should select the first one",function(){var c=a(),d=a();b.addTab(c),expect(c.active).toBe(!0),b.addTab(d),expect(c.active).toBe(!0)}),it("should select a tab added that's already active",function(){var c=a(),d=a(!0);b.addTab(c),expect(c.active).toBe(!0),b.addTab(d),expect(c.active).toBe(!1),expect(d.active).toBe(!0)})})}),describe("remove",function(){it("should remove title tabs when elements are destroyed and change selection",inject(function(g,h,i){f=i.$new(),e=h('<tabset><tab heading="1">Hello</tab><tab ng-repeat="i in list" heading="tab {{i}}">content {{i}}</tab></tabset>')(f),f.$apply(),c(["1"]),d(["Hello"]),f.$apply("list = [1,2,3]"),c(["1","tab 1","tab 2","tab 3"]),d(["Hello","content 1","content 2","content 3"]),a().find("a").eq(3).click(),expect(b().eq(3)).toHaveClass("active"),expect(a().eq(3)).toHaveClass("active"),f.$apply("list = [1,2]"),c(["1","tab 1","tab 2"]),d(["Hello","content 1","content 2"]),expect(a().eq(2)).toHaveClass("active"),expect(b().eq(2)).toHaveClass("active"),a().find("a").eq(1).click(),expect(a().eq(1)).toHaveClass("active"),expect(b().eq(1)).toHaveClass("active"),f.$apply("list = [2]"),c(["1","tab 2"]),d(["Hello","content 2"]),expect(a().eq(1)).toHaveClass("active"),expect(b().eq(1)).toHaveClass("active")}))}),describe("disabled",function(){function c(c){var d=a();angular.forEach(f.tabs,function(a,e){c===a?(expect(a.active).toBe(!0),expect(a.select.callCount).toBe(a.disabled?0:1),expect(d.eq(e)).toHaveClass("active"),expect(b().eq(e).text().trim()).toBe("content "+e),expect(b().eq(e)).toHaveClass("active")):(expect(a.active).toBe(!1),expect(d.eq(e)).not.toHaveClass("active"))})}beforeEach(inject(function(a,b){function c(a){return{active:!1,select:jasmine.createSpy(),disabled:a}}f=b.$new(),f.tabs=[c(!1),c(!0),c(!1),c(!0)],e=a(["<tabset>",'  <tab ng-repeat="t in tabs" active="t.active" select="t.select()" disabled="t.disabled">',"    <tab-heading><b>heading</b> {{index}}</tab-heading>","    content {{$index}}","  </tab>","</tabset>"].join("\n"))(f),f.$apply()})),it("should not switch active when clicking on title",function(){a().eq(2).find("a").click(),c(f.tabs[2]),a().eq(3).find("a").click(),c(f.tabs[2])}),it("should toggle between states",function(){expect(a().eq(3)).toHaveClass("disabled"),f.$apply("tabs[3].disabled = false"),expect(a().eq(3)).not.toHaveClass("disabled"),expect(a().eq(2)).not.toHaveClass("disabled"),f.$apply("tabs[2].disabled = true"),expect(a().eq(2)).toHaveClass("disabled")})}),describe("vertical",function(){beforeEach(inject(function(a,b){f=b.$new(),f.vertical=!0,e=a('<tabset vertical="vertical"></tabset>')(f),f.$apply()})),it("to stack tabs",function(){expect(e.find("ul.nav-tabs")).toHaveClass("nav-stacked")})}),describe("justified",function(){beforeEach(inject(function(a,b){f=b.$new(),f.justified=!0,e=a('<tabset justified="justified"></tabset>')(f),f.$apply()})),it("to justify tabs",function(){expect(e.find("ul.nav-tabs")).toHaveClass("nav-justified")})}),describe("type",function(){beforeEach(inject(function(a,b){f=b.$new(),f.navType="pills",e=a('<tabset type="{{navType}}"></tabset>')(f),f.$apply()})),it("to show pills",function(){expect(e.find("ul")).toHaveClass("nav-pills"),expect(e.find("ul")).not.toHaveClass("nav-tabs")})}),describe("child compilation",function(){var a;beforeEach(inject(function(b,c){a=b("<tabset><tab><div></div></tab></tabset></div>")(c.$new()),c.$apply()})),it("should hookup the tab's children to the tab with $compile",function(){var b=$(".tab-pane",a).children().first();expect(b.inheritedData("$tabsetController")).toBeTruthy()})}),describe("ng-options in content",function(){var a;it("should render correct amount of options",inject(function(b,c){var d=c.$new();a=b('<tabset><tab><select ng-model="foo" ng-options="i for i in [1,2,3]"></tab>')(d),d.$apply();var e=a.find("select");d.$apply(),expect(e.children().length).toBe(4)}))}),describe("ng-repeat in content",function(){var a;it("should render ng-repeat",inject(function(b,c){var d=c.$new();d.tabs=[{title:"a",array:[1,2,3]},{title:"b",array:[2,3,4]},{title:"c",array:[3,4,5]}],a=b('<div><tabset><tab ng-repeat="tab in tabs" heading="{{tab.title}}"><tab-heading>{{$index}}</tab-heading><span ng-repeat="a in tab.array">{{a}},</span></tab></tabset></div>')(d),d.$apply();var e=a.find(".tab-pane");expect(e.eq(0).text().trim()).toEqual("1,2,3,"),expect(e.eq(1).text().trim()).toEqual("2,3,4,"),expect(e.eq(2).text().trim()).toEqual("3,4,5,")}))}),describe("nested tabs",function(){var a;it("should render without errors",inject(function(b,c){var d=c.$new();a=b(["<div>",'  <tabset class="tabbable">','    <tab heading="Tab 1">','      <tabset class="tabbable">','        <tab heading="Tab 1A">',"        </tab>","      </tabset>","    </tab>",'    <tab heading="Tab 2">','      <tabset class="tabbable">','        <tab heading="Tab 2A">',"        </tab>","      </tabset>","    </tab>","  </tabset>","</div>"].join("\n"))(d),d.$apply(),expect(a.find(".tabbable").length).toEqual(3)})),it("should render with the correct scopes",inject(function(b,c){var d=c.$new();d.tab1Text="abc",d.tab1aText="123",d.tab1aHead="123",d.tab2aaText="456",a=b(["<div>",'  <tabset class="tabbable">','    <tab heading="Tab 1">','      <tabset class="tabbable">','        <tab heading="{{ tab1aHead }}">',"          {{ tab1aText }}","        </tab>","      </tabset>",'      <span class="tab-1">{{ tab1Text }}</span>',"    </tab>",'    <tab heading="Tab 2">','      <tabset class="tabbable">','        <tab heading="Tab 2A">','          <tabset class="tabbable">','            <tab heading="Tab 2AA">','              <span class="tab-2aa">{{ tab2aaText }}</span>',"            </tab>","          </tabset>","        </tab>","      </tabset>","    </tab>","  </tabset>","</div>"].join("\n"))(d),d.$apply();var e=a.find(".tabbable").eq(0),f=e.find(".tabbable");expect(a.find(".tabbable").length).toEqual(4),expect(e.find(".tab-pane").eq(0).find(".tab-1").text().trim()).toEqual(d.tab1Text),expect(f.find(".tab-pane").eq(0).text().trim()).toEqual(d.tab1aText),expect(f.find("ul.nav-tabs li").eq(0).text().trim()).toEqual(d.tab1aHead),expect(f.eq(2).find(".tab-pane").eq(0).find(".tab-2aa").text().trim()).toEqual(d.tab2aaText)})),it("ng-repeat works with nested tabs",inject(function(b,c){var d=c.$new();d.tabs=[{tabs:[{content:"tab1a"},{content:"tab2a"}],content:"tab1"}],a=b(["<div>","  <tabset>",'    <tab ng-repeat="tab in tabs">',"      <tabset>",'        <tab ng-repeat="innerTab in tab.tabs">','          <span class="inner-tab-content">{{ innerTab.content }}</span>',"        </tab>","      </tabset>",'      <span class="outer-tab-content">{{ tab.content }}</span>',"    </tab>","  </tabset>","</div>"].join("\n"))(d),d.$apply(),expect(a.find(".inner-tab-content").eq(0).text().trim()).toEqual(d.tabs[0].tabs[0].content),expect(a.find(".inner-tab-content").eq(1).text().trim()).toEqual(d.tabs[0].tabs[1].content),expect(a.find(".outer-tab-content").eq(0).text().trim()).toEqual(d.tabs[0].content)}))})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\tabs\test\tabs.spec.min.map