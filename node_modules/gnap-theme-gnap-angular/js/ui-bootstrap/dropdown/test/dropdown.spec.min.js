describe("dropdownToggle",function(){var a,b,c,d;beforeEach(module("ui.bootstrap.dropdown")),beforeEach(inject(function(d,e,f){a=d,b=e,c=f}));var e=function(a){a=a||d,a.find("a[dropdown-toggle]").click()},f=function(a,b){var c=$.Event("keydown");c.which=b,a.trigger(c)},g=function(a){return a[0]===document.activeElement};describe("basic",function(){function h(){return a("<li dropdown><a href dropdown-toggle></a><ul><li><a href>Hello</a></li></ul></li>")(b)}beforeEach(function(){d=h()}),it("should toggle on `a` click",function(){expect(d.hasClass("open")).toBe(!1),e(),expect(d.hasClass("open")).toBe(!0),e(),expect(d.hasClass("open")).toBe(!1)}),it("should toggle when an option is clicked",function(){c.find("body").append(d),expect(d.hasClass("open")).toBe(!1),e(),expect(d.hasClass("open")).toBe(!0);var a=d.find("ul > li").eq(0).find("a").eq(0);a.click(),expect(d.hasClass("open")).toBe(!1),d.remove()}),it("should close on document click",function(){e(),expect(d.hasClass("open")).toBe(!0),c.click(),expect(d.hasClass("open")).toBe(!1)}),it("should close on escape key & focus toggle element",function(){c.find("body").append(d),e(),f(c,27),expect(d.hasClass("open")).toBe(!1),expect(g(d.find("a"))).toBe(!0),d.remove()}),it("should not close on backspace key",function(){e(),f(c,8),expect(d.hasClass("open")).toBe(!0)}),it("should close on $location change",function(){e(),expect(d.hasClass("open")).toBe(!0),b.$broadcast("$locationChangeSuccess"),b.$apply(),expect(d.hasClass("open")).toBe(!1)}),it("should only allow one dropdown to be open at once",function(){var a=h(),b=h();expect(a.hasClass("open")).toBe(!1),expect(b.hasClass("open")).toBe(!1),e(a),expect(a.hasClass("open")).toBe(!0),expect(b.hasClass("open")).toBe(!1),e(b),expect(a.hasClass("open")).toBe(!1),expect(b.hasClass("open")).toBe(!0)}),it("should not toggle if the element has `disabled` class",function(){var c=a('<li dropdown><a class="disabled" dropdown-toggle></a><ul><li>Hello</li></ul></li>')(b);e(c),expect(c.hasClass("open")).toBe(!1)}),it("should not toggle if the element is disabled",function(){var c=a('<li dropdown><button disabled="disabled" dropdown-toggle></button><ul><li>Hello</li></ul></li>')(b);c.find("button").click(),expect(c.hasClass("open")).toBe(!1)}),it("should not toggle if the element has `ng-disabled` as true",function(){b.isdisabled=!0;var c=a('<li dropdown><div ng-disabled="isdisabled" dropdown-toggle></div><ul><li>Hello</li></ul></li>')(b);b.$digest(),c.find("div").click(),expect(c.hasClass("open")).toBe(!1),b.isdisabled=!1,b.$digest(),c.find("div").click(),expect(c.hasClass("open")).toBe(!0)}),it("should unbind events on scope destroy",function(){var c=b.$new(),d=a('<li dropdown><button ng-disabled="isdisabled" dropdown-toggle></button><ul><li>Hello</li></ul></li>')(c);c.$digest();var e=d.find("button");e.click(),expect(d.hasClass("open")).toBe(!0),e.click(),expect(d.hasClass("open")).toBe(!1),c.$destroy(),e.click(),expect(d.hasClass("open")).toBe(!1)}),it("executes other document click events normally",function(){var c=a('<input type="checkbox" ng-click="clicked = true" />')(b);b.$digest(),expect(d.hasClass("open")).toBe(!1),expect(b.clicked).toBeFalsy(),e(),expect(d.hasClass("open")).toBe(!0),expect(b.clicked).toBeFalsy(),c.click(),expect(b.clicked).toBeTruthy()}),it("should aria markup to the `dropdown-toggle`",function(){var a=d.find("a");expect(a.attr("aria-haspopup")).toBe("true"),expect(a.attr("aria-expanded")).toBe("false"),e(),expect(a.attr("aria-expanded")).toBe("true"),e(),expect(a.attr("aria-expanded")).toBe("false")})}),describe("without trigger",function(){beforeEach(function(){b.isopen=!0,d=a('<li dropdown is-open="isopen"><ul><li>Hello</li></ul></li>')(b),b.$digest()}),it("should be open initially",function(){expect(d.hasClass("open")).toBe(!0)}),it("should toggle when `is-open` changes",function(){b.isopen=!1,b.$digest(),expect(d.hasClass("open")).toBe(!1)})}),describe("`is-open`",function(){beforeEach(function(){b.isopen=!0,d=a('<li dropdown is-open="isopen"><a href dropdown-toggle></a><ul><li>Hello</li></ul></li>')(b),b.$digest()}),it("should be open initially",function(){expect(d.hasClass("open")).toBe(!0)}),it("should change `is-open` binding when toggles",function(){e(),expect(b.isopen).toBe(!1)}),it("should toggle when `is-open` changes",function(){b.isopen=!1,b.$digest(),expect(d.hasClass("open")).toBe(!1)}),it("focus toggle element when opening",function(){c.find("body").append(d),e(),b.isopen=!1,b.$digest(),expect(g(d.find("a"))).toBe(!1),b.isopen=!0,b.$digest(),expect(g(d.find("a"))).toBe(!0),d.remove()})}),describe("`on-toggle`",function(){beforeEach(function(){b.toggleHandler=jasmine.createSpy("toggleHandler"),b.isopen=!1,d=a('<li dropdown on-toggle="toggleHandler(open)"  is-open="isopen"><a dropdown-toggle></a><ul><li>Hello</li></ul></li>')(b),b.$digest()}),it("should not have been called initially",function(){expect(b.toggleHandler).not.toHaveBeenCalled()}),it("should call it correctly when toggles",function(){b.isopen=!0,b.$digest(),expect(b.toggleHandler).toHaveBeenCalledWith(!0),e(),expect(b.toggleHandler).toHaveBeenCalledWith(!1)})}),describe("`on-toggle` with initially open",function(){beforeEach(function(){b.toggleHandler=jasmine.createSpy("toggleHandler"),b.isopen=!0,d=a('<li dropdown on-toggle="toggleHandler(open)" is-open="isopen"><a dropdown-toggle></a><ul><li>Hello</li></ul></li>')(b),b.$digest()}),it("should not have been called initially",function(){expect(b.toggleHandler).not.toHaveBeenCalled()}),it("should call it correctly when toggles",function(){b.isopen=!1,b.$digest(),expect(b.toggleHandler).toHaveBeenCalledWith(!1),b.isopen=!0,b.$digest(),expect(b.toggleHandler).toHaveBeenCalledWith(!0)})}),describe("`on-toggle` without is-open",function(){beforeEach(function(){b.toggleHandler=jasmine.createSpy("toggleHandler"),d=a('<li dropdown on-toggle="toggleHandler(open)"><a dropdown-toggle></a><ul><li>Hello</li></ul></li>')(b),b.$digest()}),it("should not have been called initially",function(){expect(b.toggleHandler).not.toHaveBeenCalled()}),it("should call it when clicked",function(){e(),expect(b.toggleHandler).toHaveBeenCalledWith(!0),e(),expect(b.toggleHandler).toHaveBeenCalledWith(!1)})})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\dropdown\test\dropdown.spec.min.map