describe("stacked map",function(){var a;beforeEach(module("ui.bootstrap.modal")),beforeEach(inject(function(b){a=b.createNew()})),it("should add and remove objects by key",function(){a.add("foo","foo_value"),expect(a.length()).toEqual(1),expect(a.get("foo").key).toEqual("foo"),expect(a.get("foo").value).toEqual("foo_value"),a.remove("foo"),expect(a.length()).toEqual(0),expect(a.get("foo")).toBeUndefined()}),it("should support listing keys",function(){a.add("foo","foo_value"),a.add("bar","bar_value"),expect(a.keys()).toEqual(["foo","bar"])}),it("should get topmost element",function(){a.add("foo","foo_value"),a.add("bar","bar_value"),expect(a.length()).toEqual(2),expect(a.top().key).toEqual("bar"),expect(a.length()).toEqual(2)}),it("should remove topmost element",function(){a.add("foo","foo_value"),a.add("bar","bar_value"),expect(a.removeTop().key).toEqual("bar"),expect(a.removeTop().key).toEqual("foo")}),it("should preserve semantic of an empty stackedMap",function(){expect(a.length()).toEqual(0),expect(a.top()).toBeUndefined()}),it("should ignore removal of non-existing elements",function(){expect(a.remove("non-existing")).toBeUndefined()})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\modal\test\stackedMap.spec.min.map