var expectFriendNames=function(a,b){element.all(by.repeater(b+" in friends").column(b+".name")).then(function(b){b.forEach(function(b,c){expect(b.getText()).toMatch(a[c])})})};it("should search across all fields when filtering with a string",function(){var a=element(by.model("searchText"));a.clear(),a.sendKeys("m"),expectFriendNames(["Mary","Mike","Adam"],"friend"),a.clear(),a.sendKeys("76"),expectFriendNames(["John","Julie"],"friend")}),it("should search in specific fields when filtering with a predicate object",function(){var a=element(by.model("search.$"));a.clear(),a.sendKeys("i"),expectFriendNames(["Mary","Mike","Julie","Juliette"],"friendObj")}),it("should use a equal comparison when comparator is true",function(){var a=element(by.model("search.name")),b=element(by.model("strict"));a.clear(),a.sendKeys("Julie"),b.click(),expectFriendNames(["Julie"],"friendObj")});
//# sourceMappingURL=..\..\..\..\debug\angular\docs\examples\example-example50\protractor.min.map