describe("tooltip",function(){var a,b,c,d;beforeEach(module("ui.bootstrap.tooltip")),beforeEach(module("template/tooltip/tooltip-popup.html")),beforeEach(inject(function(e,f){b=angular.element('<div><span tooltip="tooltip text" tooltip-animation="false">Selector Text</span></div>'),c=e,f(b)(c),c.$digest(),a=b.find("span"),d=a.scope()})),it("should not be open initially",inject(function(){expect(d.tt_isOpen).toBe(!1),expect(b.children().length).toBe(1)})),it("should open on mouseenter",inject(function(){a.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!0),expect(b.children().length).toBe(2)})),it("should close on mouseleave",inject(function(){a.trigger("mouseenter"),a.trigger("mouseleave"),expect(d.tt_isOpen).toBe(!1)})),it("should not animate on animation set to false",inject(function(){expect(d.tt_animation).toBe(!1)})),it('should have default placement of "top"',inject(function(){a.trigger("mouseenter"),expect(d.tt_placement).toBe("top")})),it("should allow specification of placement",inject(function(b){a=b(angular.element('<span tooltip="tooltip text" tooltip-placement="bottom">Selector Text</span>'))(c),c.$apply(),d=a.scope(),a.trigger("mouseenter"),expect(d.tt_placement).toBe("bottom")})),it("should work inside an ngRepeat",inject(function(b){a=b(angular.element('<ul><li ng-repeat="item in items"><span tooltip="{{item.tooltip}}">{{item.name}}</span></li></ul>'))(c),c.items=[{name:"One",tooltip:"First Tooltip"}],c.$digest();var d=angular.element(a.find("li > span")[0]);d.trigger("mouseenter"),expect(d.text()).toBe(c.items[0].name),expect(d.scope().tt_content).toBe(c.items[0].tooltip),d.trigger("mouseleave")})),it("should only have an isolate scope on the popup",inject(function(e){var f;c.tooltipMsg="Tooltip Text",c.alt="Alt Message",b=e(angular.element('<div><span alt={{alt}} tooltip="{{tooltipMsg}}" tooltip-animation="false">Selector Text</span></div>'))(c),e(b)(c),c.$digest(),a=b.find("span"),d=a.scope(),a.trigger("mouseenter"),expect(a.attr("alt")).toBe(c.alt),f=angular.element(b.children()[1]).isolateScope(),expect(f.placement).toBe("top"),expect(f.content).toBe(c.tooltipMsg),a.trigger("mouseleave"),a.trigger("mouseenter"),f=angular.element(b.children()[1]).isolateScope(),expect(f.placement).toBe("top"),expect(f.content).toBe(c.tooltipMsg)})),it("should not show tooltips if there is nothing to show - issue #129",inject(function(a){b=a(angular.element('<div><span tooltip="">Selector Text</span></div>'))(c),c.$digest(),b.find("span").trigger("mouseenter"),expect(b.children().length).toBe(1)})),it("should close the tooltip when its trigger element is destroyed",inject(function(){a.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!0),a.remove(),d.$destroy(),expect(b.children().length).toBe(0)})),it("issue 1191 - isolate scope on the popup should always be child of correct element scope",function(){var c;a.trigger("mouseenter"),c=angular.element(b.children()[1]).isolateScope(),expect(c.$parent).toBe(d),a.trigger("mouseleave"),a.trigger("mouseenter"),c=angular.element(b.children()[1]).isolateScope(),expect(c.$parent).toBe(d),a.trigger("mouseleave")}),describe("with specified enable expression",function(){beforeEach(inject(function(e){c.enable=!1,b=e(angular.element('<div><span tooltip="tooltip text" tooltip-enable="enable">Selector Text</span></div>'))(c),c.$digest(),a=b.find("span"),d=a.scope()})),it("should not open ",inject(function(){a.trigger("mouseenter"),expect(d.tt_isOpen).toBeFalsy(),expect(b.children().length).toBe(1)})),it("should open",inject(function(){c.enable=!0,c.$digest(),a.trigger("mouseenter"),expect(d.tt_isOpen).toBeTruthy(),expect(b.children().length).toBe(2)}))}),describe("with specified popup delay",function(){beforeEach(inject(function(b){c.delay="1000",a=b(angular.element('<span tooltip="tooltip text" tooltip-popup-delay="{{delay}}">Selector Text</span>'))(c),d=a.scope(),c.$digest()})),it("should open after timeout",inject(function(b){a.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!1),b.flush(),expect(d.tt_isOpen).toBe(!0)})),it("should not open if mouseleave before timeout",inject(function(b){a.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!1),a.trigger("mouseleave"),b.flush(),expect(d.tt_isOpen).toBe(!1)})),it("should use default popup delay if specified delay is not a number",function(){c.delay="text1000",c.$digest(),a.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!0)})}),describe("with a trigger attribute",function(){var a,b,c,d;beforeEach(inject(function(b){a=b})),it("should use it to show but set the hide trigger based on the map for mapped triggers",inject(function(e){b=angular.element('<div><input tooltip="Hello!" tooltip-trigger="focus" /></div>'),e(b)(a),a.$apply(),c=b.find("input"),d=c.scope(),expect(d.tt_isOpen).toBeFalsy(),c.trigger("focus"),expect(d.tt_isOpen).toBeTruthy(),c.trigger("blur"),expect(d.tt_isOpen).toBeFalsy()})),it("should use it as both the show and hide triggers for unmapped triggers",inject(function(e){b=angular.element('<div><input tooltip="Hello!" tooltip-trigger="fakeTriggerAttr" /></div>'),e(b)(a),a.$apply(),c=b.find("input"),d=c.scope(),expect(d.tt_isOpen).toBeFalsy(),c.trigger("fakeTriggerAttr"),expect(d.tt_isOpen).toBeTruthy(),c.trigger("fakeTriggerAttr"),expect(d.tt_isOpen).toBeFalsy()})),it("should not share triggers among different element instances - issue 692",inject(function(c){a.test=!0,b=angular.element("<div><input tooltip=\"Hello!\" tooltip-trigger=\"{{ (test && 'mouseenter' || 'click') }}\" /><input tooltip=\"Hello!\" tooltip-trigger=\"{{ (test && 'mouseenter' || 'click') }}\" /></div>"),c(b)(a),a.$apply();var d=b.find("input").eq(0),e=b.find("input").eq(1),f=(d.scope(),e.scope());a.$apply("test = false"),e.trigger("mouseenter"),expect(f.tt_isOpen).toBeFalsy(),e.click(),expect(f.tt_isOpen).toBeTruthy()}))}),describe("with an append-to-body attribute",function(){var a,b,c,d,e;beforeEach(inject(function(b){a=b})),afterEach(function(){e.find(".tooltip").remove()}),it("should append to the body",inject(function(f,g){e=g.find("body"),b=angular.element('<div><span tooltip="tooltip text" tooltip-append-to-body="true">Selector Text</span></div>'),f(b)(a),a.$digest(),c=b.find("span"),d=c.scope();var h=e.children().length;c.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!0),expect(b.children().length).toBe(1),expect(e.children().length).toEqual(h+1)}))}),describe("cleanup",function(){function a(){var a=!1;return angular.forEach(angular.element.cache,function(b){b.data&&b.data.$isolateScope===e&&(a=!0)}),a}var b,c,d,e;beforeEach(inject(function(a,f){b=angular.element('<div><input tooltip="Hello!" tooltip-trigger="fooTrigger" /></div>'),a(b)(f),f.$apply(),c=b.find("input"),d=c.scope(),c.trigger("fooTrigger"),e=d.$$childTail})),it("should not contain a cached reference when visible",inject(function(){expect(a()).toBeTruthy(),d.$destroy(),expect(a()).toBeFalsy()}))})}),describe("tooltipWithDifferentSymbols",function(){var a;beforeEach(module("ui.bootstrap.tooltip")),beforeEach(module("template/tooltip/tooltip-popup.html")),beforeEach(module(function(a){a.startSymbol("[["),a.startSymbol("]]")})),it("should show the correct tooltip text",inject(function(b,c){a=angular.element('<div><input type="text" tooltip="My tooltip" tooltip-trigger="focus" tooltip-placement="right" /></div>'),b(a)(c),c.$apply(),elmInput=a.find("input"),elmInput.trigger("focus"),expect(elmInput.next().find("div").next().html()).toBe("My tooltip")}))}),describe("tooltipHtmlUnsafe",function(){var a,b,c;beforeEach(module("ui.bootstrap.tooltip",function(a){a.options({animation:!1})})),beforeEach(module("template/tooltip/tooltip-html-unsafe-popup.html")),beforeEach(inject(function(d,e){c=d,c.html='I say: <strong class="hello">Hello!</strong>',b=e(angular.element('<div><span tooltip-html-unsafe="{{html}}">Selector Text</span></div>'))(c),c.$digest(),a=b.find("span"),elmScope=a.scope()})),it("should render html properly",inject(function(){a.trigger("mouseenter"),expect(b.find(".tooltip-inner").html()).toBe(c.html)})),it("should show on mouseenter and hide on mouseleave",inject(function(){expect(elmScope.tt_isOpen).toBe(!1),a.trigger("mouseenter"),expect(elmScope.tt_isOpen).toBe(!0),expect(b.children().length).toBe(2),expect(elmScope.tt_content).toEqual(c.html),a.trigger("mouseleave"),expect(elmScope.tt_isOpen).toBe(!1),expect(b.children().length).toBe(1)}))}),describe("$tooltipProvider",function(){var a,b,c,d;describe("popupDelay",function(){beforeEach(module("ui.bootstrap.tooltip",function(a){a.options({popupDelay:1e3})})),beforeEach(module("template/tooltip/tooltip-popup.html")),beforeEach(inject(function(e,f){b=angular.element('<div><span tooltip="tooltip text">Selector Text</span></div>'),c=e,f(b)(c),c.$digest(),a=b.find("span"),d=a.scope()})),it("should open after timeout",inject(function(b){a.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!1),b.flush(),expect(d.tt_isOpen).toBe(!0)}))}),describe("appendToBody",function(){var e;beforeEach(module("template/tooltip/tooltip-popup.html")),beforeEach(module("ui.bootstrap.tooltip",function(a){a.options({appendToBody:!0})})),afterEach(function(){e.find(".tooltip").remove()}),it("should append to the body",inject(function(f,g,h){e=h.find("body"),b=angular.element('<div><span tooltip="tooltip text">Selector Text</span></div>'),c=f,g(b)(c),c.$digest(),a=b.find("span"),d=a.scope();var i=e.children().length;a.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!0),expect(b.children().length).toBe(1),expect(e.children().length).toEqual(i+1)})),it("should close on location change",inject(function(e,f){b=angular.element('<div><span tooltip="tooltip text">Selector Text</span></div>'),c=e,f(b)(c),c.$digest(),a=b.find("span"),d=a.scope(),a.trigger("mouseenter"),expect(d.tt_isOpen).toBe(!0),c.$broadcast("$locationChangeSuccess"),c.$digest(),expect(d.tt_isOpen).toBe(!1)}))}),describe("triggers",function(){describe("triggers with a mapped value",function(){beforeEach(module("ui.bootstrap.tooltip",function(a){a.options({trigger:"focus"})})),beforeEach(module("template/tooltip/tooltip-popup.html")),it("should use the show trigger and the mapped value for the hide trigger",inject(function(e,f){b=angular.element('<div><input tooltip="tooltip text" /></div>'),c=e,f(b)(c),c.$digest(),a=b.find("input"),d=a.scope(),expect(d.tt_isOpen).toBeFalsy(),a.trigger("focus"),expect(d.tt_isOpen).toBeTruthy(),a.trigger("blur"),expect(d.tt_isOpen).toBeFalsy()})),it("should override the show and hide triggers if there is an attribute",inject(function(e,f){b=angular.element('<div><input tooltip="tooltip text" tooltip-trigger="mouseenter"/></div>'),c=e,f(b)(c),c.$digest(),a=b.find("input"),d=a.scope(),expect(d.tt_isOpen).toBeFalsy(),a.trigger("mouseenter"),expect(d.tt_isOpen).toBeTruthy(),a.trigger("mouseleave"),expect(d.tt_isOpen).toBeFalsy()}))}),describe("triggers with a custom mapped value",function(){beforeEach(module("ui.bootstrap.tooltip",function(a){a.setTriggers({customOpenTrigger:"customCloseTrigger"}),a.options({trigger:"customOpenTrigger"})})),beforeEach(module("template/tooltip/tooltip-popup.html")),it("should use the show trigger and the mapped value for the hide trigger",inject(function(e,f){b=angular.element('<div><input tooltip="tooltip text" /></div>'),c=e,f(b)(c),c.$digest(),a=b.find("input"),d=a.scope(),expect(d.tt_isOpen).toBeFalsy(),a.trigger("customOpenTrigger"),expect(d.tt_isOpen).toBeTruthy(),a.trigger("customCloseTrigger"),expect(d.tt_isOpen).toBeFalsy()}))}),describe("triggers without a mapped value",function(){beforeEach(module("ui.bootstrap.tooltip",function(a){a.options({trigger:"fakeTrigger"})})),beforeEach(module("template/tooltip/tooltip-popup.html")),it("should use the show trigger to hide",inject(function(e,f){b=angular.element('<div><span tooltip="tooltip text">Selector Text</span></div>'),c=e,f(b)(c),c.$digest(),a=b.find("span"),d=a.scope(),expect(d.tt_isOpen).toBeFalsy(),a.trigger("fakeTrigger"),expect(d.tt_isOpen).toBeTruthy(),a.trigger("fakeTrigger"),expect(d.tt_isOpen).toBeFalsy()}))})})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\tooltip\test\tooltip.spec.min.map