describe("$modal",function(){function a(a){var b=k.open(a);return e.$digest(),b}function b(a,b){a.close(b),i.flush(),e.$digest()}function c(a,b){a.dismiss(b),i.flush(),e.$digest()}var d,e,f,g,h,i,j,k,l,m=function(a,b){var c=$.Event("keydown");c.which=b,a.trigger(c)},n=function(){inject(function(a){a.transitionEndEventName&&i.flush()})};beforeEach(module("ui.bootstrap.modal")),beforeEach(module("template/modal/backdrop.html")),beforeEach(module("template/modal/window.html")),beforeEach(module(function(a,b){d=a,l=b})),beforeEach(inject(function(a,b,c,d,l,m,n){e=a,f=b,g=c,h=d,i=l,j=m,k=n})),beforeEach(function(){this.addMatchers({toBeResolvedWith:function(a){var b;return this.message=function(){return'Expected "'+angular.mock.dump(this.actual)+'" to be resolved with "'+a+'".'},this.actual.then(function(a){b=a}),e.$digest(),b===a},toBeRejectedWith:function(a){var b;return this.message=function(){return'Expected "'+angular.mock.dump(this.actual)+'" to be rejected with "'+a+'".'},this.actual.then(angular.noop,function(a){b=a}),e.$digest(),b===a},toHaveModalOpenWithContent:function(a,b){var c,d=this.actual.find("body > div.modal > div.modal-dialog > div.modal-content");return this.message=function(){return'"Expected "'+angular.mock.dump(d)+'" to be open with "'+a+'".'},c=b?d.find(b):d,"block"===d.css("display")&&c.html()==a},toHaveModalsOpen:function(a){var b=this.actual.find("body > div.modal");return b.length===a},toHaveBackdrop:function(){var a=this.actual.find("body > div.modal-backdrop");return this.message=function(){return'Expected "'+angular.mock.dump(a)+'" to be a backdrop element".'},1===a.length}})}),afterEach(function(){var a=f.find("body");a.find("div.modal").remove(),a.find("div.modal-backdrop").remove(),a.removeClass("modal-open")}),describe("basic scenarios with default options",function(){it("should open and dismiss a modal with a minimal set of options",function(){var b=a({template:"<div>Content</div>"});expect(f).toHaveModalsOpen(1),expect(f).toHaveModalOpenWithContent("Content","div"),expect(f).toHaveBackdrop(),c(b,"closing in test"),expect(f).toHaveModalsOpen(0),n(),expect(f).not.toHaveBackdrop()}),it("should not throw an exception on a second dismiss",function(){var b=a({template:"<div>Content</div>"});expect(f).toHaveModalsOpen(1),expect(f).toHaveModalOpenWithContent("Content","div"),expect(f).toHaveBackdrop(),c(b,"closing in test"),expect(f).toHaveModalsOpen(0),c(b,"closing in test")}),it("should not throw an exception on a second close",function(){var c=a({template:"<div>Content</div>"});expect(f).toHaveModalsOpen(1),expect(f).toHaveModalOpenWithContent("Content","div"),expect(f).toHaveBackdrop(),b(c,"closing in test"),expect(f).toHaveModalsOpen(0),b(c,"closing in test")}),it("should open a modal from templateUrl",function(){h.put("content.html","<div>URL Content</div>");var b=a({templateUrl:"content.html"});expect(f).toHaveModalsOpen(1),expect(f).toHaveModalOpenWithContent("URL Content","div"),expect(f).toHaveBackdrop(),c(b,"closing in test"),expect(f).toHaveModalsOpen(0),n(),expect(f).not.toHaveBackdrop()}),it("should support closing on ESC",function(){a({template:"<div>Content</div>"});expect(f).toHaveModalsOpen(1),m(f,27),i.flush(),e.$digest(),expect(f).toHaveModalsOpen(0)}),it("should support closing on backdrop click",function(){a({template:"<div>Content</div>"});expect(f).toHaveModalsOpen(1),f.find("body > div.modal").click(),i.flush(),e.$digest(),expect(f).toHaveModalsOpen(0)}),it("should resolve returned promise on close",function(){var c=a({template:"<div>Content</div>"});b(c,"closed ok"),expect(c.result).toBeResolvedWith("closed ok")}),it("should reject returned promise on dismiss",function(){var b=a({template:"<div>Content</div>"});c(b,"esc"),expect(b.result).toBeRejectedWith("esc")}),it("should expose a promise linked to the templateUrl / resolve promises",function(){var b=a({template:"<div>Content</div>",resolve:{ok:function(){return j.when("ok")}}});expect(b.opened).toBeResolvedWith(!0)}),it("should expose a promise linked to the templateUrl / resolve promises and reject it if needed",function(){var b=a({template:"<div>Content</div>",resolve:{ok:function(){return j.reject("ko")}}});expect(b.opened).toBeRejectedWith(!1)})}),describe("default options can be changed in a provider",function(){it("should allow overriding default options in a provider",function(){l.options.backdrop=!1;a({template:"<div>Content</div>"});expect(f).toHaveModalOpenWithContent("Content","div"),expect(f).not.toHaveBackdrop()}),it("should accept new objects with default options in a provider",function(){l.options={backdrop:!1};a({template:"<div>Content</div>"});expect(f).toHaveModalOpenWithContent("Content","div"),expect(f).not.toHaveBackdrop()})}),describe("option by option",function(){describe("template and templateUrl",function(){it("should throw an error if none of template and templateUrl are provided",function(){expect(function(){a({})}).toThrow(new Error("One of template or templateUrl options is required."))}),it("should not fail if a templateUrl contains leading / trailing white spaces",function(){h.put("whitespace.html","  <div>Whitespaces</div>  "),a({templateUrl:"whitespace.html"}),expect(f).toHaveModalOpenWithContent("Whitespaces","div")}),it("should accept template as a function",function(){a({template:function(){return"<div>From a function</div>"}}),expect(f).toHaveModalOpenWithContent("From a function","div")}),it("should not fail if a templateUrl as a function",function(){h.put("whitespace.html","  <div>Whitespaces</div>  "),a({templateUrl:function(){return"whitespace.html"}}),expect(f).toHaveModalOpenWithContent("Whitespaces","div")})}),describe("controller",function(){it("should accept controllers and inject modal instances",function(){var b=function(a,b){a.fromCtrl="Content from ctrl",a.isModalInstance=angular.isObject(b)&&angular.isFunction(b.close)};a({template:"<div>{{fromCtrl}} {{isModalInstance}}</div>",controller:b}),expect(f).toHaveModalOpenWithContent("Content from ctrl true","div")}),it("should accept controllerAs alias",function(){d.register("TestCtrl",function(a){this.fromCtrl="Content from ctrl",this.isModalInstance=angular.isObject(a)&&angular.isFunction(a.close)}),a({template:"<div>{{test.fromCtrl}} {{test.isModalInstance}}</div>",controller:"TestCtrl as test"}),expect(f).toHaveModalOpenWithContent("Content from ctrl true","div")}),it("should respect the controllerAs property as an alternative for the controller-as syntax",function(){d.register("TestCtrl",function(a){this.fromCtrl="Content from ctrl",this.isModalInstance=angular.isObject(a)&&angular.isFunction(a.close)}),a({template:"<div>{{test.fromCtrl}} {{test.isModalInstance}}</div>",controller:"TestCtrl",controllerAs:"test"}),expect(f).toHaveModalOpenWithContent("Content from ctrl true","div")}),it("should allow defining in-place controller-as controllers",function(){a({template:"<div>{{test.fromCtrl}} {{test.isModalInstance}}</div>",controller:function(a){this.fromCtrl="Content from ctrl",this.isModalInstance=angular.isObject(a)&&angular.isFunction(a.close)},controllerAs:"test"}),expect(f).toHaveModalOpenWithContent("Content from ctrl true","div")})}),describe("resolve",function(){function b(a,b){return{template:a,controller:c,resolve:b}}var c=function(a,b){a.value=b};it("should resolve simple values",function(){a(b("<div>{{value}}</div>",{value:function(){return"Content from resolve"}})),expect(f).toHaveModalOpenWithContent("Content from resolve","div")}),it("should delay showing modal if one of the resolves is a promise",function(){a(b("<div>{{value}}</div>",{value:function(){return i(function(){return"Promise"},100)}})),expect(f).toHaveModalsOpen(0),i.flush(),expect(f).toHaveModalOpenWithContent("Promise","div")}),it("should not open dialog (and reject returned promise) if one of resolve fails",function(){var c=j.defer(),d=a(b("<div>{{value}}</div>",{value:function(){return c.promise}}));expect(f).toHaveModalsOpen(0),c.reject("error in test"),e.$digest(),expect(f).toHaveModalsOpen(0),expect(d.result).toBeRejectedWith("error in test")}),it("should support injection with minification-safe syntax in resolve functions",function(){a(b("<div>{{value.id}}</div>",{value:["$locale",function(a){return a}]})),expect(f).toHaveModalOpenWithContent("en-us","div")})}),describe("scope",function(){it("should use custom scope if provided",function(){var b=e.$new();b.fromScope="Content from custom scope",a({template:"<div>{{fromScope}}</div>",scope:b}),expect(f).toHaveModalOpenWithContent("Content from custom scope","div")}),it("should create and use child of $rootScope if custom scope not provided",function(){e.$$childTail;e.fromScope="Content from root scope",a({template:"<div>{{fromScope}}</div>"}),expect(f).toHaveModalOpenWithContent("Content from root scope","div")})}),describe("keyboard",function(){it("should not close modals if keyboard option is set to false",function(){a({template:"<div>No keyboard</div>",keyboard:!1}),expect(f).toHaveModalsOpen(1),m(f,27),e.$digest(),expect(f).toHaveModalsOpen(1)})}),describe("backdrop",function(){it("should not have any backdrop element if backdrop set to false",function(){var b=a({template:"<div>No backdrop</div>",backdrop:!1});expect(f).toHaveModalOpenWithContent("No backdrop","div"),expect(f).not.toHaveBackdrop(),c(b),expect(f).toHaveModalsOpen(0)}),it('should not close modal on backdrop click if backdrop is specified as "static"',function(){a({template:"<div>Static backdrop</div>",backdrop:"static"}),f.find("body > div.modal-backdrop").click(),e.$digest(),expect(f).toHaveModalOpenWithContent("Static backdrop","div"),expect(f).toHaveBackdrop()}),it("should animate backdrop on each modal opening",function(){var b=a({template:"<div>With backdrop</div>"}),d=f.find("body > div.modal-backdrop");expect(d).not.toHaveClass("in"),i.flush(),expect(d).toHaveClass("in"),c(b),n(),b=a({template:"<div>With backdrop</div>"}),d=f.find("body > div.modal-backdrop"),expect(d).not.toHaveClass("in")}),describe("custom backdrop classes",function(){it("should support additional backdrop class as string",function(){a({template:"<div>With custom backdrop class</div>",backdropClass:"additional"}),expect(f.find("div.modal-backdrop")).toHaveClass("additional")})})}),describe("custom window classes",function(){it("should support additional window class as string",function(){a({template:"<div>With custom window class</div>",windowClass:"additional"}),expect(f.find("div.modal")).toHaveClass("additional")})}),describe("size",function(){it("should support creating small modal dialogs",function(){a({template:"<div>Small modal dialog</div>",size:"sm"}),expect(f.find("div.modal-dialog")).toHaveClass("modal-sm")}),it("should support creating large modal dialogs",function(){a({template:"<div>Large modal dialog</div>",size:"lg"}),expect(f.find("div.modal-dialog")).toHaveClass("modal-lg")})})}),describe("multiple modals",function(){it("it should allow opening of multiple modals",function(){var b=a({template:"<div>Modal1</div>"}),d=a({template:"<div>Modal2</div>"});expect(f).toHaveModalsOpen(2),c(d),expect(f).toHaveModalsOpen(1),expect(f).toHaveModalOpenWithContent("Modal1","div"),c(b),expect(f).toHaveModalsOpen(0)}),it("should not close any modals on ESC if the topmost one does not allow it",function(){a({template:"<div>Modal1</div>"}),a({template:"<div>Modal2</div>",keyboard:!1});m(f,27),e.$digest(),expect(f).toHaveModalsOpen(2)}),it("should not close any modals on click if a topmost modal does not have backdrop",function(){a({template:"<div>Modal1</div>"}),a({template:"<div>Modal2</div>",backdrop:!1});f.find("body > div.modal-backdrop").click(),e.$digest(),expect(f).toHaveModalsOpen(2)}),it("multiple modals should not interfere with default options",function(){a({template:"<div>Modal1</div>",backdrop:!1}),a({template:"<div>Modal2</div>"});e.$digest(),expect(f).toHaveBackdrop()}),it('should add "modal-open" class when a modal gets opened',function(){var b=f.find("body");expect(b).not.toHaveClass("modal-open");var d=a({template:"<div>Content1</div>"});expect(b).toHaveClass("modal-open");var e=a({template:"<div>Content1</div>"});expect(b).toHaveClass("modal-open"),c(d),expect(b).toHaveClass("modal-open"),c(e),expect(b).not.toHaveClass("modal-open")})})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\modal\test\modal.spec.min.map