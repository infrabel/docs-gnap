describe("carousel",function(){beforeEach(module("ui.bootstrap.carousel",function(a,b){function c(c){b.value(c+"Directive",[]),a.directive(c,function(){return function(a,b,d){b.on(c,function(){a.$apply(d[c])})}})}angular.forEach(["ngSwipeLeft","ngSwipeRight"],c)})),beforeEach(module("template/carousel/carousel.html","template/carousel/slide.html"));var a,b,c,d;beforeEach(inject(function(e,f,g,h){a=e,b=f,c=g,d=h})),describe("basics",function(){function c(a){for(var b=0;b<f.slides.length;b++)b==a?expect(f.slides[b].active).toBe(!0):expect(f.slides[b].active).not.toBe(!0)}var e,f;beforeEach(function(){f=a.$new(),f.slides=[{active:!1,content:"one"},{active:!1,content:"two"},{active:!1,content:"three"}],e=b('<carousel interval="interval" no-transition="true" no-pause="nopause"><slide ng-repeat="slide in slides" active="slide.active">{{slide.content}}</slide></carousel>')(f),f.interval=5e3,f.nopause=void 0,f.$apply()}),it("should set the selected slide to active = true",function(){expect(f.slides[0].content).toBe("one"),c(0),f.$apply("slides[1].active=true"),c(1)}),it("should create clickable prev nav button",function(){var a=e.find("a.left"),b=e.find("a.right");expect(a.length).toBe(1),expect(b.length).toBe(1)}),it("should display clickable slide indicators",function(){var a=e.find("ol.carousel-indicators > li");expect(a.length).toBe(3)}),it("should hide navigation when only one slide",function(){f.slides=[{active:!1,content:"one"}],f.$apply(),e=b('<carousel interval="interval" no-transition="true"><slide ng-repeat="slide in slides" active="slide.active">{{slide.content}}</slide></carousel>')(f);var a=e.find("ol.carousel-indicators > li");expect(a.length).toBe(0);var c=e.find("a.right");expect(c.length).toBe(0);var d=e.find("a.left");expect(d.length).toBe(0)}),it("should show navigation when there are 3 slides",function(){var a=e.find("ol.carousel-indicators > li");expect(a.length).not.toBe(0);var b=e.find("a.right");expect(b.length).not.toBe(0);var c=e.find("a.left");expect(c.length).not.toBe(0)}),it("should go to next when clicking next button",function(){var a=e.find("a.right");c(0),a.click(),c(1),a.click(),c(2),a.click(),c(0)}),it("should go to prev when clicking prev button",function(){var a=e.find("a.left");c(0),a.click(),c(2),a.click(),c(1),a.click(),c(0)}),describe("swiping",function(){it("should go next on swipeLeft",function(){c(0),e.triggerHandler("ngSwipeLeft"),c(1)}),it("should go prev on swipeRight",function(){c(0),e.triggerHandler("ngSwipeRight"),c(2)})}),it("should select a slide when clicking on slide indicators",function(){var a=e.find("ol.carousel-indicators > li");a.eq(1).click(),c(1)}),it("shouldnt go forward if interval is NaN or negative",function(){c(0),f.$apply("interval = -1"),c(0),f.$apply("interval = 1000"),d.flush(),c(1),f.$apply("interval = false"),c(1),f.$apply("interval = 1000"),d.flush(),c(2)}),it("should bind the content to slides",function(){var a=e.find("div.item");expect(a.length).toBe(3),expect(a.eq(0).text()).toBe("one"),expect(a.eq(1).text()).toBe("two"),expect(a.eq(2).text()).toBe("three"),f.$apply(function(){f.slides[0].content="what",f.slides[1].content="no",f.slides[2].content="maybe"}),expect(a.eq(0).text()).toBe("what"),expect(a.eq(1).text()).toBe("no"),expect(a.eq(2).text()).toBe("maybe")}),it("should be playing by default and cycle through slides",function(){c(0),d.flush(),c(1),d.flush(),c(2),d.flush(),c(0)}),it("should pause and play on mouseover",function(){c(0),d.flush(),c(1),e.trigger("mouseenter"),expect(d.flush).toThrow(),c(1),e.trigger("mouseleave"),d.flush(),c(2)}),it("should not pause on mouseover if noPause",function(){f.$apply("nopause = true"),c(0),e.trigger("mouseenter"),d.flush(),c(1),e.trigger("mouseleave"),d.flush(),c(2)}),it("should remove slide from dom and change active slide",function(){f.$apply("slides[2].active = true"),c(2),f.$apply("slides.splice(0,1)"),expect(e.find("div.item").length).toBe(2),c(1),d.flush(),c(0),f.$apply("slides.splice(1,1)"),expect(e.find("div.item").length).toBe(1),c(0)}),it("should change dom when you reassign ng-repeat slides array",function(){f.slides=[{content:"new1"},{content:"new2"},{content:"new3"}],f.$apply();var a=e.find("div.item");expect(a.length).toBe(3),expect(a.eq(0).text()).toBe("new1"),expect(a.eq(1).text()).toBe("new2"),expect(a.eq(2).text()).toBe("new3")}),it("should not change if next is clicked while transitioning",function(){var a=e.children().scope(),b=e.find("a.right");c(0),a.$currentTransition=!0,b.click(),c(0),a.$currentTransition=null,b.click(),c(1)}),it("issue 1414 - should not continue running timers after scope is destroyed",function(){c(0),d.flush(),c(1),d.flush(),c(2),d.flush(),c(0),f.$destroy(),expect(d.flush).toThrow("No deferred tasks to be flushed")})}),describe("controller",function(){var b,e,f=[{content:1},{content:2},{content:3},{content:4}];beforeEach(function(){b=a.$new(),e=c("CarouselController",{$scope:b,$element:null});for(var d=0;d<f.length;d++)e.addSlide(f[d])}),describe("addSlide",function(){it("should set first slide to active = true and the rest to false",function(){angular.forEach(e.slides,function(a,b){0!==b?expect(a.active).not.toBe(!0):expect(a.active).toBe(!0)})}),it("should add new slide and change active to true if active is true on the added slide",function(){var a={active:!0};expect(e.slides.length).toBe(4),e.addSlide(a),expect(e.slides.length).toBe(5),expect(e.slides[4].active).toBe(!0),expect(e.slides[0].active).toBe(!1)}),it("should add a new slide and not change the active slide",function(){var a={active:!1};expect(e.slides.length).toBe(4),e.addSlide(a),expect(e.slides.length).toBe(5),expect(e.slides[4].active).toBe(!1),expect(e.slides[0].active).toBe(!0)}),it("should remove slide and change active slide if needed",function(){expect(e.slides.length).toBe(4),e.removeSlide(e.slides[0]),expect(e.slides.length).toBe(3),expect(e.currentSlide).toBe(e.slides[0]),e.select(e.slides[2]),e.removeSlide(e.slides[2]),expect(e.slides.length).toBe(2),expect(e.currentSlide).toBe(e.slides[1]),e.removeSlide(e.slides[0]),expect(e.slides.length).toBe(1),expect(e.currentSlide).toBe(e.slides[0])}),it("issue 1414 - should not continue running timers after scope is destroyed",function(){spyOn(b,"next").andCallThrough(),b.interval=2e3,b.$digest(),d.flush(),expect(b.next.calls.length).toBe(1),b.$destroy(),d.flush(b.interval),expect(b.next.calls.length).toBe(1)})})})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\carousel\test\carousel.spec.min.map