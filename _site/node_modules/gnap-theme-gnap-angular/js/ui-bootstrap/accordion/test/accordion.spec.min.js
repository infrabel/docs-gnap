describe("accordion",function(){var a;beforeEach(module("ui.bootstrap.accordion")),beforeEach(module("template/accordion/accordion.html")),beforeEach(module("template/accordion/accordion-group.html")),beforeEach(inject(function(b){a=b})),describe("controller",function(){var b,c,d;beforeEach(inject(function(e){d={},c={},b=e("AccordionController",{$scope:a,$element:c,$attrs:d})})),describe("addGroup",function(){it("adds a the specified panel to the collection",function(){var c,d;b.addGroup(c=a.$new()),b.addGroup(d=a.$new()),expect(b.groups.length).toBe(2),expect(b.groups[0]).toBe(c),expect(b.groups[1]).toBe(d)})}),describe("closeOthers",function(){var a,c,e;beforeEach(function(){b.addGroup(a={isOpen:!0,$on:angular.noop}),b.addGroup(c={isOpen:!0,$on:angular.noop}),b.addGroup(e={isOpen:!0,$on:angular.noop})}),it("should close other panels if close-others attribute is not defined",function(){delete d.closeOthers,b.closeOthers(c),expect(a.isOpen).toBe(!1),expect(c.isOpen).toBe(!0),expect(e.isOpen).toBe(!1)}),it("should close other panels if close-others attribute is true",function(){d.closeOthers="true",b.closeOthers(e),expect(a.isOpen).toBe(!1),expect(c.isOpen).toBe(!1),expect(e.isOpen).toBe(!0)}),it("should not close other panels if close-others attribute is false",function(){d.closeOthers="false",b.closeOthers(c),expect(a.isOpen).toBe(!0),expect(c.isOpen).toBe(!0),expect(e.isOpen).toBe(!0)}),describe("setting accordionConfig",function(){var d;beforeEach(inject(function(a){d=a.closeOthers,a.closeOthers=!1})),afterEach(inject(function(a){a.closeOthers=d})),it("should not close other panels if accordionConfig.closeOthers is false",function(){b.closeOthers(c),expect(a.isOpen).toBe(!0),expect(c.isOpen).toBe(!0),expect(e.isOpen).toBe(!0)})})}),describe("removeGroup",function(){it("should remove the specified panel",function(){var c,d,e;b.addGroup(c=a.$new()),b.addGroup(d=a.$new()),b.addGroup(e=a.$new()),b.removeGroup(d),expect(b.groups.length).toBe(2),expect(b.groups[0]).toBe(c),expect(b.groups[1]).toBe(e)}),it("should ignore remove of non-existing panel",function(){var c,d;b.addGroup(c=a.$new()),b.addGroup(d=a.$new()),expect(b.groups.length).toBe(2),b.removeGroup({}),expect(b.groups.length).toBe(2)})})}),describe("accordion-group",function(){var a,b,c,d,e=function(a){return d.eq(a).find("a").eq(0)},f=function(a){return d.eq(a).find(".panel-collapse").eq(0)};beforeEach(inject(function(c,d){a=c,b=d})),afterEach(function(){c=d=a=b=void 0}),describe("with static panels",function(){beforeEach(function(){var e='<accordion><accordion-group heading="title 1">Content 1</accordion-group><accordion-group heading="title 2">Content 2</accordion-group></accordion>';c=angular.element(e),b(c)(a),a.$digest(),d=c.find(".panel")}),afterEach(function(){c.remove()}),it("should create accordion panels with content",function(){expect(d.length).toEqual(2),expect(e(0).text()).toEqual("title 1"),expect(f(0).text().trim()).toEqual("Content 1"),expect(e(1).text()).toEqual("title 2"),expect(f(1).text().trim()).toEqual("Content 2")}),it("should change selected element on click",function(){e(0).click(),a.$digest(),expect(f(0).scope().isOpen).toBe(!0),e(1).click(),a.$digest(),expect(f(0).scope().isOpen).toBe(!1),expect(f(1).scope().isOpen).toBe(!0)}),it("should toggle element on click",function(){e(0).click(),a.$digest(),expect(f(0).scope().isOpen).toBe(!0),e(0).click(),a.$digest(),expect(f(0).scope().isOpen).toBe(!1)})}),describe("with dynamic panels",function(){var g;beforeEach(function(){var d='<accordion><accordion-group ng-repeat="group in groups" heading="{{group.name}}">{{group.content}}</accordion-group></accordion>';c=angular.element(d),g=[{name:"title 1",content:"Content 1"},{name:"title 2",content:"Content 2"}],b(c)(a),a.$digest()}),it("should have no panels initially",function(){d=c.find(".panel"),expect(d.length).toEqual(0)}),it("should have a panel for each model item",function(){a.groups=g,a.$digest(),d=c.find(".panel"),expect(d.length).toEqual(2),expect(e(0).text()).toEqual("title 1"),expect(f(0).text().trim()).toEqual("Content 1"),expect(e(1).text()).toEqual("title 2"),expect(f(1).text().trim()).toEqual("Content 2")}),it("should react properly on removing items from the model",function(){a.groups=g,a.$digest(),d=c.find(".panel"),expect(d.length).toEqual(2),a.groups.splice(0,1),a.$digest(),d=c.find(".panel"),expect(d.length).toEqual(1)})}),describe("is-open attribute",function(){beforeEach(function(){var e='<accordion><accordion-group heading="title 1" is-open="open.first">Content 1</accordion-group><accordion-group heading="title 2" is-open="open.second">Content 2</accordion-group></accordion>';c=angular.element(e),a.open={first:!1,second:!0},b(c)(a),a.$digest(),d=c.find(".panel")}),it("should open the panel with isOpen set to true",function(){expect(f(0).scope().isOpen).toBe(!1),expect(f(1).scope().isOpen).toBe(!0)}),it("should toggle variable on element click",function(){e(0).click(),a.$digest(),expect(a.open.first).toBe(!0),e(0).click(),a.$digest(),expect(a.open.second).toBe(!1)})}),describe("is-open attribute with dynamic content",function(){beforeEach(function(){var e='<accordion><accordion-group heading="title 1" is-open="open1"><div ng-repeat="item in items">{{item}}</div></accordion-group><accordion-group heading="title 2" is-open="open2">Static content</accordion-group></accordion>';c=angular.element(e),a.items=["Item 1","Item 2","Item 3"],a.open1=!0,a.open2=!1,angular.element(document.body).append(c),b(c)(a),a.$digest(),d=c.find(".panel")}),afterEach(function(){c.remove()}),it("should have visible panel body when the group with isOpen set to true",function(){expect(f(0)[0].clientHeight).not.toBe(0),expect(f(1)[0].clientHeight).toBe(0)})}),describe("is-open attribute with dynamic groups",function(){beforeEach(function(){var e='<accordion><accordion-group ng-repeat="group in groups" heading="{{group.name}}" is-open="group.open">{{group.content}}</accordion-group></accordion>';c=angular.element(e),a.groups=[{name:"title 1",content:"Content 1",open:!1},{name:"title 2",content:"Content 2",open:!0}],b(c)(a),a.$digest(),d=c.find(".panel")}),it("should have visible group body when the group with isOpen set to true",function(){expect(f(0).scope().isOpen).toBe(!1),expect(f(1).scope().isOpen).toBe(!0)}),it("should toggle element on click",function(){e(0).click(),a.$digest(),expect(f(0).scope().isOpen).toBe(!0),expect(a.groups[0].open).toBe(!0),e(0).click(),a.$digest(),expect(f(0).scope().isOpen).toBe(!1),expect(a.groups[0].open).toBe(!1)})}),describe("`is-disabled` attribute",function(){var g;beforeEach(function(){var e='<accordion><accordion-group heading="title 1" is-disabled="disabled">Content 1</accordion-group></accordion>';c=angular.element(e),a.disabled=!0,b(c)(a),a.$digest(),d=c.find(".panel"),g=f(0)}),it("should open the panel with isOpen set to true",function(){expect(g.scope().isOpen).toBeFalsy()}),it("should not toggle if disabled",function(){e(0).click(),a.$digest(),expect(g.scope().isOpen).toBeFalsy()}),it("should toggle after enabling",function(){a.disabled=!1,a.$digest(),expect(g.scope().isOpen).toBeFalsy(),e(0).click(),a.$digest(),expect(g.scope().isOpen).toBeTruthy()})}),describe("accordion-heading element",function(){beforeEach(function(){var e='<accordion ng-init="a = [1,2,3]"><accordion-group heading="I get overridden"><accordion-heading>Heading Element <span ng-repeat="x in a">{{x}}</span> </accordion-heading>Body</accordion-group></accordion>';c=b(e)(a),a.$digest(),d=c.find(".panel")}),it("transcludes the <accordion-heading> content into the heading link",function(){expect(e(0).text()).toBe("Heading Element 123 ")}),it("attaches the same scope to the transcluded heading and body",function(){expect(e(0).find("span").scope().$id).toBe(f(0).find("span").scope().$id)})}),describe("accordion-heading attribute",function(){beforeEach(function(){var e='<accordion ng-init="a = [1,2,3]"><accordion-group heading="I get overridden"><div accordion-heading>Heading Element <span ng-repeat="x in a">{{x}}</span> </div>Body</accordion-group></accordion>';c=b(e)(a),a.$digest(),d=c.find(".panel")}),it("transcludes the <accordion-heading> content into the heading link",function(){expect(e(0).text()).toBe("Heading Element 123 ")}),it("attaches the same scope to the transcluded heading and body",function(){expect(e(0).find("span").scope().$id).toBe(f(0).find("span").scope().$id)})}),describe("accordion-heading, with repeating accordion-groups",function(){it("should clone the accordion-heading for each group",function(){c=b('<accordion><accordion-group ng-repeat="x in [1,2,3]"><accordion-heading>{{x}}</accordion-heading></accordion-group></accordion>')(a),a.$digest(),d=c.find(".panel"),expect(d.length).toBe(3),expect(e(0).text()).toBe("1"),expect(e(1).text()).toBe("2"),expect(e(2).text()).toBe("3")})}),describe("accordion-heading attribute, with repeating accordion-groups",function(){it("should clone the accordion-heading for each group",function(){c=b('<accordion><accordion-group ng-repeat="x in [1,2,3]"><div accordion-heading>{{x}}</div></accordion-group></accordion>')(a),a.$digest(),d=c.find(".panel"),expect(d.length).toBe(3),expect(e(0).text()).toBe("1"),expect(e(1).text()).toBe("2"),expect(e(2).text()).toBe("3")})})})});
//# sourceMappingURL=..\..\..\debug\ui-bootstrap\accordion\test\accordion.spec.min.map